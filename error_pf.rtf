{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1053{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman{\*\falt Times New Roman};}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial{\*\falt Helvetica};}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New{\*\falt Tahoma};}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\froman\fcharset0\fprq2{\*\panose 02020603050405020304}TIMES;}
{\f5\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}HELVETICA{\*\falt Arial};}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}{\f7\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Geneva;}
{\f8\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset0\fprq2{\*\panose 00000000000000000000}MS Serif;}
{\f11\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset0\fprq2{\*\panose 00000000000000000000}New York;}{\f13\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;}
{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f15\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f16\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Verdana;}
{\f17\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Letter Gothic;}{\f18\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier 16.67 Pitch;}{\f19\froman\fcharset0\fprq2{\*\panose 00000000000000000000}CG Times;}
{\f20\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Marlett;}{\f21\fmodern\fcharset0\fprq1{\*\panose 020b0609040504020204}Lucida Console;}{\f22\fswiss\fcharset0\fprq2{\*\panose 020b0602030504020204}Lucida Sans Unicode;}
{\f23\fswiss\fcharset0\fprq2{\*\panose 020b0506030101010103}Abadi MT Condensed;}{\f24\froman\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f25\froman\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}
{\f26\fswiss\fcharset0\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f27\fscript\fcharset0\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f28\fswiss\fcharset0\fprq2{\*\panose 020b0806030902050204}Impact;}
{\f29\froman\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f30\froman\fcharset0\fprq2{\*\panose 00050102010706020507}Map Symbols;}{\f31\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}MNS00004;}
{\f32\fswiss\fcharset0\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f33\froman\fcharset0\fprq2{\*\panose 02020404030301010803}Garamond;}{\f34\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Charme;}
{\f35\fswiss\fcharset0\fprq2{\*\panose 020b0500000000000000}Zap-Chance;}{\f36\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Tera Special;}{\f37\fnil\fcharset0\fprq0{\*\panose 00000000000000000000}Padua;}
{\f38\fnil\fcharset0\fprq0{\*\panose 00000000000000000000}EBZZZZ+Universal-NewswithCommPi{\*\falt Times};}{\f39\fmodern\fcharset0\fprq0{\*\panose 00000000000000000000}Roman 10cpi{\*\falt Times};}
{\f40\froman\fcharset177\fprq2{\*\panose 00000000000000000000}Times New Roman (Hebrew){\*\falt Times New Roman};}{\f41\froman\fcharset178\fprq2{\*\panose 00000000000000000000}Times New Roman (Arabic){\*\falt Times New Roman};}
{\f42\fswiss\fcharset177\fprq2{\*\panose 00000000000000000000}Arial (Hebrew){\*\falt helvetica};}{\f43\fswiss\fcharset178\fprq2{\*\panose 00000000000000000000}Arial (Arabic){\*\falt helvetica};}
{\f44\fmodern\fcharset177\fprq1{\*\panose 00000000000000000000}Courier New (Hebrew){\*\falt Tahoma};}{\f45\fmodern\fcharset178\fprq1{\*\panose 00000000000000000000}Courier New (Arabic){\*\falt Tahoma};}
{\f46\froman\fcharset0\fprq2{\*\panose 02040602050305030304}Book Antiqua{\*\falt Times New Roman};}{\f47\fswiss\fcharset0\fprq2{\*\panose 020b0603020202020204}Trebuchet MS{\*\falt Arial};}
{\f48\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Fixedsys;}{\f49\fmodern\fcharset255\fprq1{\*\panose 00000000000000000000}Terminal;}{\f50\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Small Fonts;}
{\f51\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Dialog;}{\f52\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Dialog Light;}{\f53\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS SystemEx;}
{\f54\fmodern\fcharset2\fprq1{\*\panose 00000000000000000000}MS LineDraw;}{\f55\fdecor\fcharset0\fprq2{\*\panose 00000000000000000000}Algerian;}{\f56\fswiss\fcharset0\fprq2{\*\panose 020f0704030504030204}Arial Rounded MT Bold;}
{\f57\froman\fcharset0\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f58\fdecor\fcharset0\fprq2{\*\panose 00000000000000000000}Braggadocio;}{\f59\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Britannic Bold;}
{\f60\fscript\fcharset0\fprq2{\*\panose 03060802040406070304}Brush Script MT;}{\f61\fswiss\fcharset0\fprq2{\*\panose 020b0502020202020204}Century Gothic;}{\f62\fdecor\fcharset0\fprq2{\*\panose 00000000000000000000}Colonna MT;}
{\f63\fdecor\fcharset0\fprq2{\*\panose 00000000000000000000}Desdemona;}{\f64\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Footlight MT Light;}{\f65\fdecor\fcharset0\fprq2{\*\panose 00000000000000000000}Kino MT;}
{\f66\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Wide Latin;}{\f67\fscript\fcharset0\fprq2{\*\panose 00000000000000000000}Matura MT Script Capitals;}{\f68\fdecor\fcharset0\fprq2{\*\panose 00000000000000000000}Playbill;}
{\f69\froman\fcharset0\fprq2{\*\panose 02020603060505020304}LotusWP Int A;}{\f70\froman\fcharset0\fprq2{\*\panose 02020603060505020304}LotusWP Int B;}{\f71\fmodern\fcharset2\fprq1{\*\panose 02070509030505020404}LotusWP Box;}
{\f72\froman\fcharset0\fprq2{\*\panose 02020603060505020304}LotusWP Type;}{\f73\froman\fcharset0\fprq2{\*\panose 02020603060505020304}LotusWP Icon;}{\f74\froman\fcharset2\fprq2{\*\panose 05020602060204020302}Math A;}
{\f75\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Math B;}{\f76\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Math C;}{\f77\fnil\fcharset0\fprq2{\*\panose 01010100010101010101}Lotus Postal Barcode;}
{\f78\froman\fcharset0\fprq2{\*\panose 02020502060306020303}Baskerville;}{\f79\fnil\fcharset0\fprq2{\*\panose 02010608020103020204}Binner Gothic;}{\f80\froman\fcharset0\fprq2{\*\panose 02020502060201020303}Centaur;}
{\f81\fswiss\fcharset0\fprq2{\*\panose 020b0602020004020203}Gill Sans;}{\f82\fnil\fcharset0\fprq2{\*\panose 02010606040404020203}Gill Sans Condensed;}{\f83\fswiss\fcharset0\fprq2{\*\panose 020b0a02020104020203}Gill Sans Ultra Bold;}
{\f84\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f85\fswiss\fcharset0\fprq2{\*\panose 020b0503020103020203}News Gothic;}{\f86\froman\fcharset0\fprq2{\*\panose 02040503050401020204}Nimrod;}
{\f87\froman\fcharset0\fprq2{\*\panose 02070706080601050204}Onyx;}{\f88\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Botanical;}{\f89\froman\fcharset0\fprq2{\*\panose 02060803030405020103}Rockwell;}
{\f90\froman\fcharset0\fprq2{\*\panose 02060902020105020403}Rockwell Condensed;}{\f91\froman\fcharset0\fprq2{\*\panose 02040304020103020203}Rockwell Light;}{\f92\fswiss\fcharset0\fprq2{\*\panose 020b0706040902060204}Haettenschweiler;}
{\f93\froman\fcharset2\fprq2{\*\panose 05050102010205020202}MT Extra;}{\f94\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}MS Outlook;}{\f95\froman\fcharset0\fprq2{\*\panose 02040604050505020304}Century Schoolbook;}
{\f96\froman\fcharset0\fprq2{\*\panose 02040502050405020303}Georgia;}{\f97\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Trebuchet MS CE;}{\f98\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Trebuchet MS Tur;}
{\f99\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Bookman Old Style CE;}{\f100\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Bookman Old Style Cyr;}
{\f101\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Bookman Old Style Greek;}{\f102\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Bookman Old Style Tur;}
{\f103\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Bookman Old Style Baltic;}{\f104\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Rockwell Tur;}{\f105\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Rockwell Condensed Tur;}
{\f106\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Book Antiqua CE{\*\falt Times New Roman};}{\f107\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Book Antiqua Cyr{\*\falt Times New Roman};}
{\f108\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Book Antiqua Greek{\*\falt Times New Roman};}{\f109\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Book Antiqua Tur{\*\falt Times New Roman};}
{\f110\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Book Antiqua Baltic{\*\falt Times New Roman};}{\f111\froman\fcharset238\fprq2 Times New Roman CE{\*\falt Times New Roman};}
{\f112\froman\fcharset204\fprq2 Times New Roman Cyr{\*\falt Times New Roman};}{\f114\froman\fcharset161\fprq2 Times New Roman Greek{\*\falt Times New Roman};}{\f115\froman\fcharset162\fprq2 Times New Roman Tur{\*\falt Times New Roman};}
{\f116\froman\fcharset186\fprq2 Times New Roman Baltic{\*\falt Times New Roman};}{\f117\fswiss\fcharset238\fprq2 Arial CE{\*\falt Helvetica};}{\f118\fswiss\fcharset204\fprq2 Arial Cyr{\*\falt Helvetica};}
{\f120\fswiss\fcharset161\fprq2 Arial Greek{\*\falt Helvetica};}{\f121\fswiss\fcharset162\fprq2 Arial Tur{\*\falt Helvetica};}{\f122\fswiss\fcharset186\fprq2 Arial Baltic{\*\falt Helvetica};}
{\f123\fmodern\fcharset238\fprq1 Courier New CE{\*\falt Tahoma};}{\f124\fmodern\fcharset204\fprq1 Courier New Cyr{\*\falt Tahoma};}{\f126\fmodern\fcharset161\fprq1 Courier New Greek{\*\falt Tahoma};}
{\f127\fmodern\fcharset162\fprq1 Courier New Tur{\*\falt Tahoma};}{\f128\fmodern\fcharset186\fprq1 Courier New Baltic{\*\falt Tahoma};}{\f135\froman\fcharset238\fprq2 TIMES CE;}{\f136\froman\fcharset204\fprq2 TIMES Cyr;}
{\f138\froman\fcharset161\fprq2 TIMES Greek;}{\f139\froman\fcharset162\fprq2 TIMES Tur;}{\f140\froman\fcharset186\fprq2 TIMES Baltic;}{\f141\fswiss\fcharset238\fprq2 HELVETICA CE{\*\falt Arial};}
{\f142\fswiss\fcharset204\fprq2 HELVETICA Cyr{\*\falt Arial};}{\f144\fswiss\fcharset161\fprq2 HELVETICA Greek{\*\falt Arial};}{\f145\fswiss\fcharset162\fprq2 HELVETICA Tur{\*\falt Arial};}{\f146\fswiss\fcharset186\fprq2 HELVETICA Baltic{\*\falt Arial};}
{\f201\fswiss\fcharset238\fprq2 Tahoma CE;}{\f202\fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f204\fswiss\fcharset161\fprq2 Tahoma Greek;}{\f205\fswiss\fcharset162\fprq2 Tahoma Tur;}{\f206\fswiss\fcharset186\fprq2 Tahoma Baltic;}
{\f237\fmodern\fcharset238\fprq1 Lucida Console CE;}{\f238\fmodern\fcharset204\fprq1 Lucida Console Cyr;}{\f240\fmodern\fcharset161\fprq1 Lucida Console Greek;}{\f241\fmodern\fcharset162\fprq1 Lucida Console Tur;}
{\f243\fswiss\fcharset238\fprq2 Lucida Sans Unicode CE;}{\f244\fswiss\fcharset204\fprq2 Lucida Sans Unicode Cyr;}{\f246\fswiss\fcharset161\fprq2 Lucida Sans Unicode Greek;}{\f247\fswiss\fcharset162\fprq2 Lucida Sans Unicode Tur;}
{\f267\fswiss\fcharset238\fprq2 Arial Black CE;}{\f268\fswiss\fcharset204\fprq2 Arial Black Cyr;}{\f270\fswiss\fcharset161\fprq2 Arial Black Greek;}{\f271\fswiss\fcharset162\fprq2 Arial Black Tur;}{\f272\fswiss\fcharset186\fprq2 Arial Black Baltic;}
{\f279\fswiss\fcharset238\fprq2 Impact CE;}{\f280\fswiss\fcharset204\fprq2 Impact Cyr;}{\f282\fswiss\fcharset161\fprq2 Impact Greek;}{\f283\fswiss\fcharset162\fprq2 Impact Tur;}{\f284\fswiss\fcharset186\fprq2 Impact Baltic;}
{\f303\fswiss\fcharset238\fprq2 Arial Narrow CE;}{\f304\fswiss\fcharset204\fprq2 Arial Narrow Cyr;}{\f306\fswiss\fcharset161\fprq2 Arial Narrow Greek;}{\f307\fswiss\fcharset162\fprq2 Arial Narrow Tur;}{\f308\fswiss\fcharset186\fprq2 Arial Narrow Baltic;}
{\f309\froman\fcharset238\fprq2 Garamond CE;}{\f310\froman\fcharset204\fprq2 Garamond Cyr;}{\f312\froman\fcharset161\fprq2 Garamond Greek;}{\f313\froman\fcharset162\fprq2 Garamond Tur;}{\f314\froman\fcharset186\fprq2 Garamond Baltic;}
{\f315\fnil\fcharset238\fprq2 Charme CE;}{\f318\fnil\fcharset161\fprq2 Charme Greek;}{\f319\fnil\fcharset162\fprq2 Charme Tur;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;
\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}{\s1\keepn\widctlpar\tx426\adjustright \fs32\cf2\cgrid \sbasedon0 \snext0 heading 1;}{\s2\keepn\widctlpar\adjustright \fs32\cf2\cgrid \sbasedon0 \snext0 heading 2;}{
\s3\keepn\widctlpar\adjustright \fs32\cf2\cgrid \sbasedon0 \snext0 heading 3;}{\s4\sb240\sa60\keepn\widctlpar\adjustright \fs32\cf2\cgrid \sbasedon0 \snext0 heading 4;}{\s5\sb240\sa60\widctlpar\adjustright \fs22\cgrid \sbasedon0 \snext0 heading 5;}{
\s6\sb240\sa60\widctlpar\adjustright \i\fs22\cgrid \sbasedon0 \snext0 heading 6;}{\s7\sb240\sa60\widctlpar\adjustright \f1\fs20\cgrid \sbasedon0 \snext0 heading 7;}{\s8\sb240\sa60\widctlpar\adjustright \i\f1\fs20\cgrid \sbasedon0 \snext0 heading 8;}{
\s9\sb240\sa60\widctlpar\adjustright \b\i\f1\fs18\cgrid \sbasedon0 \snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\*\cs15 \additive \ul\cf2 \sbasedon10 Hyperlink;}{\s16\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext16 footnote text;}
{\*\cs17 \additive \super \sbasedon10 footnote reference;}{\s18\widctlpar\adjustright \cbpat9 \f15\fs20\cgrid \sbasedon0 \snext18 Document Map;}{\s19\sb240\sa120\widctlpar\adjustright \b\fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 1;}{
\s20\li200\sb120\widctlpar\adjustright \i\fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 2;}{\s21\li400\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 3;}{\s22\li600\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 4;}{
\s23\li800\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 5;}{\s24\li1000\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 6;}{\s25\li1200\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 7;}{
\s26\li1400\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 8;}{\s27\li1600\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 9;}{\s28\fi-200\li200\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd 
index 1;}{\s29\fi-200\li400\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd index 2;}{\s30\fi-200\li600\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd index 3;}{\s31\fi-200\li800\widctlpar\adjustright \fs20\cgrid 
\sbasedon0 \snext0 \sautoupd index 4;}{\s32\fi-200\li1000\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd index 5;}{\s33\fi-200\li1200\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd index 6;}{
\s34\fi-200\li1400\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd index 7;}{\s35\fi-200\li1600\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd index 8;}{\s36\fi-200\li1800\widctlpar\adjustright \fs20\cgrid 
\sbasedon0 \snext0 \sautoupd index 9;}{\s37\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext28 index heading;}{\s38\fi-400\li400\widctlpar\adjustright \b\fs20\cgrid \sbasedon0 \snext0 table of figures;}}{\*\listtable{\list\listtemplateid69009429
\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid81340187}{\list\listtemplateid387625782\listsimple{\listlevel
\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid95449502}{\list\listtemplateid69009429\listsimple{\listlevel\levelnfc3\leveljc0
\levelfollow0\levelstartat2\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid131673740}{\list\listtemplateid681711574\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0
\levelstartat0\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid168327563}{\list\listtemplateid-310768278\listsimple{\listlevel\levelnfc4\leveljc0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid198977177}{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0
{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid264193670}{\list\listtemplateid-2055981380\listsimple{\listlevel\levelnfc4\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid281229160}{\list\listtemplateid-1254094600\listsimple{\listlevel\levelnfc4\leveljc0\levelfollow0\levelstartat2\levelspace0\levelindent0{\leveltext
\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid363095839}{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid390076534}{\list\listtemplateid-451917468\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext
\'01-;}{\levelnumbers;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid456720769}{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers
\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid487865147}{\list\listtemplateid69009429\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 
\fi-360\li360\jclisttab\tx360 }{\listname ;}\listid533545512}{\list\listtemplateid1060912822\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-420\li420
\jclisttab\tx420 }{\listname ;}\listid551573136}{\list\listtemplateid-532791468\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li405\jclisttab\tx405 }
{\listname ;}\listid596134112}{\list\listtemplateid69009429\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname 
;}\listid605699760}{\list\listtemplateid69009429\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid618488425}
{\list\listtemplateid-1010809510\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\uldb\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid638650170}
{\list\listtemplateid451295160\listsimple{\listlevel\levelnfc4\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\ul\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid675113437}
{\list\listtemplateid-1626828422\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\ulnone\fbias0 \fi-360\li825\jclisttab\tx825 }{\listname ;}\listid675155336}
{\list\listtemplateid-12056858\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid706372023}
{\list\listtemplateid1153497302\listsimple{\listlevel\levelnfc4\leveljc0\levelfollow0\levelstartat2\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid746878697}
{\list\listtemplateid1866482262\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat3\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid791752534}
{\list\listtemplateid-719654676\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid816458773}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid822165477}
{\list\listtemplateid69009429\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid824324480}
{\list\listtemplateid-1043040952\listsimple{\listlevel\levelnfc4\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid835851273}
{\list\listtemplateid69009429\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid850680067}
{\list\listtemplateid-1627985946\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-420\li420\jclisttab\tx420 }{\listname ;}\listid856846775}
{\list\listtemplateid69009429\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid910777180}
{\list\listtemplateid-1757121188\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li405\jclisttab\tx405 }{\listname ;}\listid948244969}
{\list\listtemplateid150882216\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat3\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid963197518}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid986475209}
{\list\listtemplateid69009429\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1021474884}
{\list\listtemplateid-647584498\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li405\jclisttab\tx405 }{\listname ;}\listid1048412077}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1050958631}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1058943582}
{\list\listtemplateid302966042\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1066024833}
{\list\listtemplateid-339543604\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1111440941}
{\list\listtemplateid-1096385746\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li720\jclisttab\tx720 }{\listname ;}\listid1168714049}
{\list\listtemplateid69009409\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1199316379}
{\list\listtemplateid-272841954\listsimple{\listlevel\levelnfc4\leveljc0\levelfollow0\levelstartat2\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1257834198}
{\list\listtemplateid-545120898\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1348600307}
{\list\listtemplateid-1479511824\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1360156292}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1361197298}
{\list\listtemplateid489464640\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-420\li420\jclisttab\tx420 }{\listname ;}\listid1383404728}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1403527100}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1450901975}
{\list\listtemplateid69009429\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat2\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1478836235}
{\list\listtemplateid869274764\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\uldb\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1483427448}
{\list\listtemplateid-328425572\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-1305\li1305\jclisttab\tx1305 }{\listname ;}\listid1536426336}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1552379069}
{\list\listtemplateid1102085658\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1570068406}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1600330404}
{\list\listtemplateid1024610028\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li405\jclisttab\tx405 }{\listname ;}\listid1611666793}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1619263494}
{\list\listtemplateid69009429\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1630436405}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1635793236}
{\list\listtemplateid69009429\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1636177306}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1666661237}
{\list\listtemplateid-1127457902\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\b\fbias0 \fi-360\li405\jclisttab\tx405 }{\listname ;}\listid1682389631}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1688824083}
{\list\listtemplateid165836354\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-1305\li1305\jclisttab\tx1305 }{\listname ;}\listid1708795786}
{\list\listtemplateid69009429\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat2\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1785423970}
{\list\listtemplateid1060533914\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\ul\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1793088525}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1814133042}
{\list\listtemplateid69009429\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1817259058}
{\list\listtemplateid-806060586\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat4\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1825656202}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1833249960}
{\list\listtemplateid1502105126\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1860772343}
{\list\listtemplateid1115963306\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat4\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1893149162}
{\list\listtemplateid-1829722290\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1925988270}
{\list\listtemplateid1391482286\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\b\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1942452960}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid2046908938}
{\list\listtemplateid1842895246\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-420\li420\jclisttab\tx420 }{\listname ;}\listid2065174653}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid2090690429}
{\list\listtemplateid700461280\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat2\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\fbias0 \fi-360\li825\jclisttab\tx825 }{\listname ;}\listid2094087265}
{\list\listtemplateid69009429\listsimple{\listlevel\levelnfc3\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid2123111087}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid2145660427}
{\list\listtemplateid69009423\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid2146045024}}
{\*\listoverridetable{\listoverride\listid948244969\listoverridecount0\ls1}{\listoverride\listid1688824083\listoverridecount0\ls2}{\listoverride\listid1111440941\listoverridecount0\ls3}{\listoverride\listid910777180\listoverridecount0\ls4}
{\listoverride\listid2123111087\listoverridecount0\ls5}{\listoverride\listid2094087265\listoverridecount0\ls6}{\listoverride\listid1199316379\listoverridecount0\ls7}{\listoverride\listid1833249960\listoverridecount0\ls8}{\listoverride\listid1450901975
\listoverridecount0\ls9}{\listoverride\listid1168714049\listoverridecount0\ls10}{\listoverride\listid2146045024\listoverridecount0\ls11}{\listoverride\listid1635793236\listoverridecount0\ls12}{\listoverride\listid986475209\listoverridecount0\ls13}
{\listoverride\listid1552379069\listoverridecount0\ls14}{\listoverride\listid1600330404\listoverridecount0\ls15}{\listoverride\listid675155336\listoverridecount0\ls16}{\listoverride\listid1066024833\listoverridecount0\ls17}{\listoverride\listid1611666793
\listoverridecount0\ls18}{\listoverride\listid596134112\listoverridecount0\ls19}{\listoverride\listid1666661237\listoverridecount0\ls20}{\listoverride\listid822165477\listoverridecount0\ls21}{\listoverride\listid1814133042\listoverridecount0\ls22}
{\listoverride\listid856846775\listoverridecount0\ls23}{\listoverride\listid2090690429\listoverridecount0\ls24}{\listoverride\listid2145660427\listoverridecount0\ls25}{\listoverride\listid264193670\listoverridecount0\ls26}{\listoverride\listid1383404728
\listoverridecount0\ls27}{\listoverride\listid1058943582\listoverridecount0\ls28}{\listoverride\listid2065174653\listoverridecount0\ls29}{\listoverride\listid1050958631\listoverridecount0\ls30}{\listoverride\listid1021474884\listoverridecount0\ls31}
{\listoverride\listid533545512\listoverridecount0\ls32}{\listoverride\listid746878697\listoverridecount0\ls33}{\listoverride\listid1785423970\listoverridecount0\ls34}{\listoverride\listid1257834198\listoverridecount0\ls35}{\listoverride\listid131673740
\listoverridecount0\ls36}{\listoverride\listid1817259058\listoverridecount0\ls37}{\listoverride\listid850680067\listoverridecount0\ls38}{\listoverride\listid81340187\listoverridecount0\ls39}{\listoverride\listid1942452960\listoverridecount0\ls40}
{\listoverride\listid835851273\listoverridecount0\ls41}{\listoverride\listid1630436405\listoverridecount0\ls42}{\listoverride\listid1478836235\listoverridecount0\ls43}{\listoverride\listid363095839\listoverridecount0\ls44}{\listoverride\listid281229160
\listoverridecount0\ls45}{\listoverride\listid605699760\listoverridecount0\ls46}{\listoverride\listid638650170\listoverridecount0\ls47}{\listoverride\listid1483427448\listoverridecount0\ls48}{\listoverride\listid1636177306\listoverridecount0\ls49}
{\listoverride\listid1793088525\listoverridecount0\ls50}{\listoverride\listid1708795786\listoverridecount0\ls51}{\listoverride\listid618488425\listoverridecount0\ls52}{\listoverride\listid675113437\listoverridecount0\ls53}{\listoverride\listid198977177
\listoverridecount0\ls54}{\listoverride\listid95449502\listoverridecount0\ls55}{\listoverride\listid1925988270\listoverridecount0\ls56}{\listoverride\listid824324480\listoverridecount0\ls57}{\listoverride\listid1860772343\listoverridecount0\ls58}
{\listoverride\listid1348600307\listoverridecount0\ls59}{\listoverride\listid551573136\listoverridecount0\ls60}{\listoverride\listid1536426336\listoverridecount0\ls61}{\listoverride\listid1361197298\listoverridecount0\ls62}{\listoverride\listid1403527100
\listoverridecount0\ls63}{\listoverride\listid487865147\listoverridecount0\ls64}{\listoverride\listid2046908938\listoverridecount0\ls65}{\listoverride\listid1825656202\listoverridecount0\ls66}{\listoverride\listid1893149162\listoverridecount0\ls67}
{\listoverride\listid390076534\listoverridecount0\ls68}{\listoverride\listid816458773\listoverridecount0\ls69}{\listoverride\listid706372023\listoverridecount0\ls70}{\listoverride\listid168327563\listoverridecount0\ls71}{\listoverride\listid1682389631
\listoverridecount0\ls72}{\listoverride\listid1048412077\listoverridecount0\ls73}{\listoverride\listid1360156292\listoverridecount0\ls74}{\listoverride\listid456720769\listoverridecount0\ls75}{\listoverride\listid1619263494\listoverridecount0\ls76}
{\listoverride\listid963197518\listoverridecount0\ls77}{\listoverride\listid791752534\listoverridecount0\ls78}{\listoverride\listid1570068406\listoverridecount0\ls79}}{\*\revtbl {Unknown;}}{\info{\title *******************************}{\author Per Sjoborg}
{\operator Per Sjoborg}{\creatim\yr2001\mo1\dy5\hr12\min33}{\revtim\yr2001\mo1\dy5\hr15\min9}{\version5}{\edmins41}{\nofpages33}{\nofwords13420}{\nofchars76495}{\*\company Pucc Multimedia HB}{\nofcharsws93941}{\vern89}}
\paperw11906\paperh16838\margl1417\margr1417\margt1417\margb1417 \deftab1304\widowctrl\ftnbj\aenddoc\hyphhotz425\hyphcaps0\formshade\viewkind4\viewscale125\pgbrdrhead\pgbrdrfoot \fet0\sectd \linex0\headery709\footery709\colsx709\endnhere\sectdefaultcl 
{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s19\sb240\sa120\widctlpar\tqr\tx9062\adjustright \b\fs20\cgrid {\field\fldedit{\*\fldinst {\f1\fs14\cf1  TOC \\o \\p " " }}{\fldrslt {\lang1024 
Error Handling In Visual Basic, Introduction }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337112 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100310032000000}}
}{\fldrslt {\lang1024 2}}}{\lang1024 
\par }\pard\plain \s20\li200\sb120\widctlpar\tqr\tx9062\adjustright \i\fs20\cgrid {\lang1024 Definitions }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337113 \\h }{\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100310033000000}}}{\fldrslt {\lang1024 3}}}{\lang1024 
\par }\pard\plain \s21\li400\widctlpar\tqr\tx9062\adjustright \fs20\cgrid {\lang1024 Error Block }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337114 \\h }{\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100310034000000}}}{\fldrslt {\lang1024 3}}}{\lang1024 
\par Error Handler }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337115 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100310035000000}}}{\fldrslt {\lang1024 4}}}{\lang1024 

\par Error Trap }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337116 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100310036000000}}}{\fldrslt {\lang1024 4}}}{\lang1024 
\par Current Error Trap }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337117 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100310037000000}}}{\fldrslt {\lang1024 4}}}{
\lang1024 
\par Open Error Trap }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337118 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100310038000000}}}{\fldrslt {\lang1024 4}}}{\lang1024 

\par Persisted Data Integrity }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337119 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100310039000000}}}{\fldrslt {\lang1024 5}}}{
\lang1024 
\par Active Error Handler }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337120 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100320030000000}}}{\fldrslt {\lang1024 5}}}{
\lang1024 
\par Compile Time Errors }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337121 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100320031000000}}}{\fldrslt {\lang1024 5}}}{
\lang1024 
\par Run Time Errors }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337122 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100320032000000}}}{\fldrslt {\lang1024 5}}}{\lang1024 

\par The VB default Error handling scheme }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337123 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100320033000000}}}{\fldrslt {
\lang1024 5}}}{\lang1024 
\par The Error Handler Context }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337124 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100320034000000}}}{\fldrslt {\lang1024 5}}}{
\lang1024 
\par Regaining the Error Context }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337125 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100320035000000}}}{\fldrslt {\lang1024 6}}}{
\lang1024 
\par Top-level Procedure }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337126 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100320036000000}}}{\fldrslt {\lang1024 6}}}{
\lang1024 
\par Reference counted toplevel procedures }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337127 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100320037000000}}}{\fldrslt {
\lang1024 6}}}{\lang1024 
\par Non toplevel procedures }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337128 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100320038000000}}}{\fldrslt {\lang1024 7}}}{
\lang1024 
\par Default Error Processing (DEP) }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337129 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100320039000000}}}{\fldrslt {\lang1024 8}
}}{\lang1024 
\par Custom Cases, CC }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337130 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100330030000000}}}{\fldrslt {\lang1024 8}}}{\lang1024 

\par Error Trapping Configurations }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337131 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100330031000000}}}{\fldrslt {\lang1024 8}
}}{\lang1024 
\par Development and Compiled Mode }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337132 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100330032000000}}}{\fldrslt {\lang1024 8}
}}{\lang1024 
\par The Call Stack (Also: Call Chain) }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337133 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100330033000000}}}{\fldrslt {
\lang1024 8}}}{\lang1024 
\par Cascading the VB call stack }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337134 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100330034000000}}}{\fldrslt {\lang1024 9}}}{
\lang1024 
\par Errors and the VB call stack }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337135 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100330035000000}}}{\fldrslt {\lang1024 10}
}}{\lang1024 
\par State Restore (Short) }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337136 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100330036000000}}}{\fldrslt {\lang1024 10}}}{
\lang1024 
\par No Error Traps }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337137 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100330037000000}}}{\fldrslt {\lang1024 10}}}{\lang1024 

\par Error handling In Development Mode }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337138 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100330038000000}}}{\fldrslt {
\lang1024 11}}}{\lang1024 
\par Error handling In Compiled Mode }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337139 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100330039000000}}}{\fldrslt {\lang1024 
12}}}{\lang1024 
\par }\pard\plain \s20\li200\sb120\widctlpar\tqr\tx9062\adjustright \i\fs20\cgrid {\lang1024 Do's and Don'ts }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337140 \\h }{\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100340030000000}}}{\fldrslt {\lang1024 13}}}{\lang1024 
\par }\pard\plain \s21\li400\widctlpar\tqr\tx9062\adjustright \fs20\cgrid {\lang1024 Do's }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337141 \\h }{\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100340031000000}}}{\fldrslt {\lang1024 13}}}{\lang1024 
\par }\pard\plain \s22\li600\widctlpar\tqr\tx9062\adjustright \fs20\cgrid {\lang1024 Integrate adding error handling in design/development }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337142 \\h }{\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100340032000000}}}{\fldrslt {\lang1024 14}}}{\lang1024 
\par Integrate error handling in the code review process }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337143 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100340033000000}}
}{\fldrslt {\lang1024 14}}}{\lang1024 
\par Include a Error system test in the application }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337144 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100340034000000}}
}{\fldrslt {\lang1024 14}}}{\lang1024 
\par Have an Error Trap in all Procedures }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337145 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100340035000000}}}{\fldrslt {
\lang1024 15}}}{\lang1024 
\par Understand Errors before you fix }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337146 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100340036000000}}}{\fldrslt {\lang1024 
15}}}{\lang1024 
\par Fix Errors carefully }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337147 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100340037000000}}}{\fldrslt {\lang1024 15}}}{
\lang1024 
\par Trace Call stack }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337148 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100340038000000}}}{\fldrslt {\lang1024 15}}}{\lang1024 

\par Trace Variable Contents }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337149 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100340039000000}}}{\fldrslt {\lang1024 16}}}{
\lang1024 
\par Implement Variable Snap Shot }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337150 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100350030000000}}}{\fldrslt {\lang1024 16}
}}{\lang1024 
\par Document Error Handling carefully }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337151 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100350031000000}}}{\fldrslt {
\lang1024 16}}}{\lang1024 
\par Use Line Numbers }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337152 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100350032000000}}}{\fldrslt {\lang1024 16}}}{\lang1024 

\par Save Line Numbered Code for Debugging }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337153 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100350033000000}}}{\fldrslt {
\lang1024 17}}}{\lang1024 
\par Use SetUnhandledExceptionFilter }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337154 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100350034000000}}}{\fldrslt {\lang1024 
17}}}{\lang1024 
\par Use Error Messages with lots of information in them }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337155 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100350035000000}}
}{\fldrslt {\lang1024 17}}}{\lang1024 
\par Use MSinfo32.exe if possible }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337156 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100350036000000}}}{\fldrslt {\lang1024 18}
}}{\lang1024 
\par Always Gather ALL data you can From the Field }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337157 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100350037000000}}
}{\fldrslt {\lang1024 18}}}{\lang1024 
\par Log Information Centrally }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337158 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100350038000000}}}{\fldrslt {\lang1024 18}}}{
\lang1024 
\par Consider Confidential Data in logs }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337159 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100350039000000}}}{\fldrslt {
\lang1024 18}}}{\lang1024 
\par Use VBs Raise Error Approach; Do Not Use the API return Approach }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337160 \\h }{\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100360030000000}}}{\fldrslt {\lang1024 18}}}{\lang1024 
\par Always have error Trap/Handling in error Handlers }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337161 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100360031000000}}
}{\fldrslt {\lang1024 19}}}{\lang1024 
\par Always Have A Sub Main }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337162 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100360032000000}}}{\fldrslt {\lang1024 19}}}{
\lang1024 
\par Always check your Components availability }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337163 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100360033000000}}}{\fldrslt {
\lang1024 19}}}{\lang1024 
\par Try To Let the App Continue To operate, as long as possible }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337164 \\h }{\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100360034000000}}}{\fldrslt {\lang1024 19}}}{\lang1024 
\par Incorporate an Easy and quick way to report error }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337165 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100360035000000}}
}{\fldrslt {\lang1024 19}}}{\lang1024 
\par Use a reminder, to get people to report error }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337166 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100360036000000}}
}{\fldrslt {\lang1024 20}}}{\lang1024 
\par Defensive Coding }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337167 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100360037000000}}}{\fldrslt {\lang1024 20}}}{\lang1024 

\par Allow your error reporting to be configured }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337168 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100360038000000}}}{\fldrslt 
{\lang1024 21}}}{\lang1024 
\par Consider how your app is supposed to be used }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337169 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100360039000000}}
}{\fldrslt {\lang1024 21}}}{\lang1024 
\par Allow cut and past on all error messages, a normal MsgBox is VERY irritating }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337170 \\h }{\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100370030000000}}}{\fldrslt {\lang1024 21}}}{\lang1024 
\par Use a dual implementation for error messages }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337171 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100370031000000}}
}{\fldrslt {\lang1024 21}}}{\lang1024 
\par In general, have Only One Error Handler in a Procedure }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337172 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100370032000000}}
}{\fldrslt {\lang1024 21}}}{\lang1024 
\par Full cycle Add/Remove/ReAdd as an important feature in maintaining consistency }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337173 \\h }{\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100370033000000}}}{\fldrslt {\lang1024 21}}}{\lang1024 
\par Reentry protection }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337174 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100370034000000}}}{\fldrslt {\lang1024 22}}}{
\lang1024 
\par On Error Logging }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337175 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100370035000000}}}{\fldrslt {\lang1024 22}}}{\lang1024 

\par Store Err Object Attributes Immediately }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337176 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100370036000000}}}{\fldrslt {
\lang1024 22}}}{\lang1024 
\par Consider the differences between Client Vs Server Apps and components vs. Standalone }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337177 \\h }{\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100370037000000}}}{\fldrslt {\lang1024 22}}}{\lang1024 
\par }\pard\plain \s21\li400\widctlpar\tqr\tx9062\adjustright \fs20\cgrid {\lang1024 Don'ts }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337178 \\h }{\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100370038000000}}}{\fldrslt {\lang1024 22}}}{\lang1024 
\par }\pard\plain \s22\li600\widctlpar\tqr\tx9062\adjustright \fs20\cgrid {\lang1024 Do not see error handling as some thing to do in the end of a project }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337179 \\h }{\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100370039000000}}}{\fldrslt {\lang1024 23}}}{\lang1024 
\par Do not wait for VB7 }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337180 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100380030000000}}}{\fldrslt {\lang1024 24}}}{
\lang1024 
\par Do not use stupid/Blind error handler after the design/development process. }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337181 \\h }{\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100380031000000}}}{\fldrslt {\lang1024 24}}}{\lang1024 
\par Do not send logs with e-mail without prompting the user }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337182 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100380032000000}
}}{\fldrslt {\lang1024 24}}}{\lang1024 
\par Never Raise Errors in Procedures that can't cascade (Initialize, Sub Main etc) }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337183 \\h }{\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100380033000000}}}{\fldrslt {\lang1024 25}}}{\lang1024 
\par Do not write fallthrough handlers }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337184 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100380034000000}}}{\fldrslt {
\lang1024 25}}}{\lang1024 
\par Do Not Trace Calls Stack on the way down }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337185 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100380035000000}}}{\fldrslt {
\lang1024 25}}}{\lang1024 
\par Never trust the user to tell you what has happened }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337186 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100380036000000}}
}{\fldrslt {\lang1024 25}}}{\lang1024 
\par Never Use On Error Resume Next Indiscriminately or as a cure all }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337187 \\h }{\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100380037000000}}}{\fldrslt {\lang1024 25}}}{\lang1024 
\par Don't Reraise Errors }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337188 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100380038000000}}}{\fldrslt {\lang1024 26}}}{
\lang1024 
\par Do not use the API return Approach }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337189 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100380039000000}}}{\fldrslt {
\lang1024 26}}}{\lang1024 
\par Do not trust MSinfo32.exe as the only source of system information }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337190 \\h }{\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100390030000000}}}{\fldrslt {\lang1024 26}}}{\lang1024 
\par Do not think a tool can do it all for you\'85 }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337191 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100390031000000}}
}{\fldrslt {\lang1024 26}}}{\lang1024 
\par }\pard\plain \s20\li200\sb120\widctlpar\tqr\tx9062\adjustright \i\fs20\cgrid {\lang1024 Regarding recovering state/some general points on this uptime improving technique }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337192 \\h }{\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100390032000000}}}{\fldrslt {\lang1024 26}}}{\lang1024 
\par Links }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337193 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100390033000000}}}{\fldrslt {\lang1024 29}}}{\lang1024 
\par Books }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337194 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100390034000000}}}{\fldrslt {\lang1024 29}}}{\lang1024 
\par Conclusion On this WP }{\field{\*\fldinst {\lang1024  PAGEREF _Toc503337195 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500300033003300330037003100390035000000}}}{\fldrslt {\lang1024 29}}}{
\lang1024 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid }}\pard\plain \widctlpar\adjustright \fs20\cgrid {\f1\fs14\cf1 \page 
\par 
\par }\pard\plain \s1\keepn\widctlpar\tx426\outlinelevel0\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328798}{\*\bkmkstart _Toc503337112}Error Handling In Visual Basic, Introduction}{\fs28 {\*\bkmkend _Toc503328798}{\*\bkmkend _Toc503337112}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\b  - Goal
\par }{Keep work }{\i fun}{ by }{\i handling errors correctly}{. First for developers developing the software, then for developer and QA team, then for users, then again for the developers and QA, when there are bugs to fix (there will be }{\lang1024 
{\field{\*\fldinst SYMBOL 74 \\f "Wingdings" \\s 10}{\fldrslt\f14\fs20}}}{\lang1024 )}{.
\par }{\b\fs14\cf1 \line }{\b  - Scoop
\par }{My intention with this WP is that there shall be a }{\i little some thing for every body between "New Bee" and "Guru."}{ I al
so limit my self to talking about "in code stuff" or stuff close to that, the actual code you can use to handle errors in VB, and collect as much information as possible to use when debugging. Therefore, what you will }{\i not find}{ is how to }{\i 
avoid errors or how to manage it organizationally}{.
\par 
\par }{\b  - The accompanying Example Application
\par }{ There is an example application, }{\i having it open in the VB IDE}{ beside the document when reading makes it allot easier. In the example there is also context sensitive help on the diffe
rent buttons, connecting the to app the WP (this only works when the application is running). Demo down load, }{\field{\*\fldinst {HYPERLINK "http://www.puccmultimedia.com/idh_wp_dl.htm"}{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b5800000068007400740070003a002f002f007700770077002e0070007500630063006d0075006c00740069006d0065006400690061002e0063006f006d002f006900640068005f00770070005f0064006c002e006800
74006d0000000000}}}{\fldrslt {\cs15\ul\cf2 http://www.puccmultimedia.com/idh_wp_dl.htm}}}{\line }{\ul 
\par }{\b  - How am I?
\par }{I would like to tell you that I work in a company that develops an Add-In that assists you in implementing most things you need in this area. However, as I hoop that this WP will be }{\i 
general source of knowledge I thought it only fair to tell you up front.}{ (If you want to check out our product do so at:}{\field\fldedit{\*\fldinst {HYPERLINK "http://www.puccmultimedia.com/"}{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b3e00000068007400740070003a002f002f007700770077002e0070007500630063006d0075006c00740069006d0065006400690061002e0063006f006d002f000000000000000000000000000000000000000000}}
}{\fldrslt { }{\field\flddirty{\*\fldinst {HYPERLINK "www.puccmultimedia.com"}{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000010000000303000000000000c0000000000000460000170000007777772e707563636d756c74696d656469612e636f6d00ffffadde000000000000000000000000000000000000000000000000000000000000000000000000000000000000}}}{\fldrslt {
\cs15\ul\cf2 www.puccmultimedia.com}}}}}{ )
\par 
\par }{\b  - Please, tell me what you think
\par }{I hope you enjoy this WP and }{\ul if you have any comment's please contact me}{ at }{\field\flddirty{\*\fldinst { HYPERLINK mailto:per@puccmultimedia.com }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b020000001700000017000000700065007200400070007500630063006d0075006c00740069006d0065006400690061002e0063006f006d000000e0c9ea79f9bace118c8200aa004ba90b3c0000006d00610069006c0074006f003a00700065007200400070007500630063006d00
75006c00740069006d0065006400690061002e0063006f006d000000000000000000000000000000000000000000}}}{\fldrslt {\cs15\ul\cf2 per@puccmultimedia.com}}}{
 I read and answer all mail, if you have any things like tips, examples etc you would like to add I would be glad to add it, with full credit offcourse. Also, check out }{\field\flddirty{\*\fldinst {HYPERLINK "www.puccmultimedia.com"}{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000010000000303000000000000c0000000000000460000170000007777772e707563636d756c74696d656469612e636f6d00ffffadde000000000000000000000000000000000000000000000000000000000000000000000000000000000000}}}{\fldrslt {
\cs15\ul\cf2 www.puccmultimedia.com}}}{ for examples, other WP's etc.
\par 
\par }{\b  - Updates 
\par }{If you want to get the latest revision including a possibility to as questions on error handling in Visual Basic,  }{\field\fldedit{\*\fldinst {HYPERLINK "http://www.puccmultimedia.com/"}{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b3e00000068007400740070003a002f002f007700770077002e0070007500630063006d0075006c00740069006d0065006400690061002e0063006f006d002f000000000000000000000000000000000000000000}}
}{\fldrslt { Please visit us at: }{\field\flddirty{\*\fldinst {HYPERLINK "www.puccmultimedia.com"}{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000010000000303000000000000c0000000000000460000170000007777772e707563636d756c74696d656469612e636f6d00ffffadde000000000000000000000000000000000000000000000000000000000000000000000000000000000000}}}{\fldrslt {
\cs15\ul\cf2 www.puccmultimedia.com}}}}}{ we also have a mailing list to keep you updated.
\par 
\par }{\b - Word, RTF Navigation
\par }{If you are viewing this document in Word either in doc or rtf format you can navigate it easily with the document overview. it sho
uld be available in your View menu. It should appear on the left side in your window just use the + and - to expand collapse the different topics. If you have any problem reefer to the word manual or mail us at support@puccmultimedia.com 
\par 
\par Please Help us test the beta of our error Code add-in IEA 
\par For product information (Not available In WP Only Version)
\par For down load (Not available of line)  
\par Or 
\par Product Information.
\par }{\field{\*\fldinst {HYPERLINK "http://www.puccmultimedia.com/idh_iea.htm"}{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b5400000068007400740070003a002f002f007700770077002e0070007500630063006d0075006c00740069006d0065006400690061002e0063006f006d002f006900640068005f006900650061002e00680074006d00
00000000}}}{\fldrslt {\cs15\ul\cf2 http://www.puccmultimedia.com/idh_iea.htm}}}{
\par Setup Down Load.\line }{\field{\*\fldinst {HYPERLINK "http://www.puccmultimedia.com/idh_dl_iea.htm"}{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b5a00000068007400740070003a002f002f007700770077002e0070007500630063006d0075006c00740069006d0065006400690061002e0063006f006d002f006900640068005f0064006c005f006900650061002e00
680074006d0000000000}}}{\fldrslt {\cs15\ul\cf2 http://www.puccmultimedia.com/idh_dl_iea.htm}}}{
\par }{\f1\fs14\cf1 \page 
\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328799}{\*\bkmkstart _Toc503337113}Definitions}{\fs28 {\*\bkmkend _Toc503328799}{\*\bkmkend _Toc503337113}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par To avoid cluttering up the text I begin with defining some essential concepts in the beginning.
\par  - Please note that this section is primarily for the VB beginner. 
\par  - Please note that there are simple demo code, so that you can see simple code "in action".
\par 
\par }{\b Explained Are:
\par }{The VB Call Stack
\par Cascading the call stack
\par Compile Time Errors
\par Run Time Errors
\par Error Block
\par Error Handler
\par Error Trap
\par Default Error Processing (DEP)_WP
\par Current Error Trap
\par Open Error Trap
\par Persisted Data Integrity
\par Active Error Handler
\par Error Context
\par Error Trapping Configurations
\par Regaining Error Context
\par Active Error Handler
\par Development and in Compiled mode
\par State Restore 
\par Top Level Procedures
\par VB default Error handling scheme 
\par }{\f1\fs14\cf1 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328800}{\*\bkmkstart _Toc503337114}Error Block{\*\bkmkend _Toc503328800}{\*\bkmkend _Toc503337114}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par I define an error block as consisting of an error trap and error handler.
\par 
\par On Error GoTo ErrorLabel 
\par 
\par \tab Stop 'This Is the Error trap Part
\par \tab 'Any code 
\par \tab Dim x as Long 
\par \tab Let x = X/0
\par 
\par Exit Sub '(etc)
\par ErrorLabel:
\par \tab Stop 'This Is the handler Part
\par 
\par Exit sub '(etc)
\par 
\par This error block will trap any error that occurs between "On Error GoTo ErrorLabel" and "ErrorLabel:" and the code execution will enter the error handler by jumping t
o the line after the jump label. There are several restriction to this but they are not of major importans will be explained later.
\par 
\par For more information, Please see:
\par SetUnhandledExceptionFilter
\par Error Context
\par Regaining Error ContextError Trap
\par Error Handler
\par }{\f1\fs14\cf1 \page 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328801}{\*\bkmkstart _Toc503337115}Error Handler}{\fs28 {\*\bkmkend _Toc503328801}{\*\bkmkend _Toc503337115}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par The error handler, error-handling code, Is the part of the error block that follows a jump label used in the On Error GoTo ErrorLabel: 
\par 
\par (ErrorLabel:}{\lang1024 )}{
\par 
\par Here goes the error handler, any code you need prepare the state of the application to one that you like. For instance set the return value if this is a function; clean up after the procedure 
\par Closing files, DB connections etc. Raising an error of your own that informs the caller of the problem, Please note that reraising the error that occurred is not a good idee.
\par 
\par End (Sub, Function, and Property)
\par 
\par For more information, Please see:
\par ReRaising ErrorsError Block
\par }{\f1\fs14\cf1 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328802}{\*\bkmkstart _Toc503337116}Error Trap{\*\bkmkend _Toc503328802}{\*\bkmkend _Toc503337116}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par The error trap part of the error block that actually protects code
\par 
\par On Error GoTo ErrorLabel 
\par 
\par \tab This is the error trap part
\par 
\par \tab Here goes any code that you want to protect.
\par 
\par Exit (Sub)
\par ErrorLabel:
\par 
\par For more information, Please see:
\par Error Block
\par }{\f1\fs14\cf1 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328803}{\*\bkmkstart _Toc503337117}Current Error Trap}{\fs28 {\*\bkmkend _Toc503328803}{\*\bkmkend _Toc503337117}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par The current error trap is the error trap that the last executed "On Error GoTo ErrorLabel" belongs to. 
\par 
\par Please note that the current error handler dos not have to be in the procedure that the error occurred in.
\par If an error occurred in a procedure that has no error trap, the error will cascade up the call stack to an Error Trap, If no error trap exists VBs default error processing will take over.
\par 
\par For more information, Please see:
\par Open Error Trap
\par The Error Context
\par }{\f1\fs14\cf1 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328804}{\*\bkmkstart _Toc503337118}Open Error Trap}{\fs28 {\*\bkmkend _Toc503328804}{\*\bkmkend _Toc503337118}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Open Error Trap, is a error an trap that is entered with the "On Error GoTo ErrorLabel" call but not yet exited, either buy a normal proc
edure end or an exit, and no error has occurred between the trap start and end   ("On Error GoTo ErrorLabel" and the "ErrorLabel:")
\par }{\f1\fs14\cf1 \page 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328805}{\*\bkmkstart _Toc503337119}Persisted Data Integrity{\*\bkmkend _Toc503328805}{\*\bkmkend _Toc503337119}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par This is an important factor out of several points of view. We define it as the validity of the data that has bean saved or is going to be saved 
\par This is significant when:
\par 1. When we implement a State restore process More Info 
\par 2. When We found a bug in production/released code then we have to evaluate if the data the uses have are OK and If not what we are going to do about it.
\par }{\f1\fs14\cf1 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328806}{\*\bkmkstart _Toc503337120}Active Error Handler{\*\bkmkend _Toc503328806}{\*\bkmkend _Toc503337120}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Is a handler where there has bean an error in the trap part (between the  "On Error GoTo ErrorLabel" and the "ErrorLabel:"). Therefore, the code execution point have jump to the line following the "ErrorLabel:" 
\par }{\f1\fs14\cf1 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328807}{\*\bkmkstart _Toc503337121}Compile Time Errors{\*\bkmkend _Toc503328807}{\*\bkmkend _Toc503337121}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par This is an error that prevents you from compiling and running the application, and are in fact the best kind of errors because they can not hide, you will be aware of them, and you can not avoid fixing them.
\par 
\par None of the techniques we talk about in this WP handles this type of errors, and they normally depend on miss spelled methods etc and are generally easy to fix.
\par }{\f1\fs14\cf1 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328808}{\*\bkmkstart _Toc503337122}Run Time Errors{\*\bkmkend _Toc503328808}{\*\bkmkend _Toc503337122}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Are errors that occur during execution. They come in two types. Ones that come from miss use o
f a method etc this will trigger an error that VB can catch. The second type is where your logical errors, where your application dos not do what it is intended to do, these errors do not generate an error that we can catch automatically.
\par Therefore, you have to add code that raises errors if the internal state of the application is unacceptable. 
\par This WP deals with the first type only.
\par  
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328809}{\*\bkmkstart _Toc503337123}The VB default Error handling scheme{\*\bkmkend _Toc503328809}{\*\bkmkend _Toc503337123} 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\b\cf2 
\par }{The default way VB handles an error differs depending on if you are working in the IDE or as a separate EXE
\par 
\par In non-IDE mode VBs default error handling is a real problem, it is short, but not sweet }{{\field{\*\fldinst SYMBOL 74 \\f "Wingdings" \\s 10}{\fldrslt\f14\fs20}}}{
. VB simply presents a dialog box with error number and description. The only button is OK, and none of your code is executed after that, n
o class terminate, unload, no nothing. Definitely not a pretty sight. Avoiding this is one of the major tasks of error management in VB.
\par In the IDE. VB will present a dialog box showing you error number and description, and allow you to select end, debug, 
and Help. Less dramatic for sure but it only works as long as you have NO error management in the call stack. When you add the first handler that error would have cascaded up to that handler and appeared as that error happened in that procedure. Therefore
, this is not a god way of debugging even small applications. 
\par 
\par Conclusion
\par Always have a error handler in all procedures, both on debug mode and in distributed mode.
\par 
\par For more information, please see:
\par Error Trapping Configurations
\par The VB Call Stack 
\par Errors And The VB Call Stack}{\f1\fs14\cf1 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328810}{\*\bkmkstart _Toc503337124}The Error Handler Context{\*\bkmkend _Toc503328810}{\*\bkmkend _Toc503337124} 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par The error context is described as the mode the app is in when an error has occurred and error trap is active. It will end when you use resume. Then the current error context is exited.
\par 
\par For more information, Please see:
\par Regaining the Error Context
\par }{\f1\fs14\cf1 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328811}{\*\bkmkstart _Toc503337125}Regaining the Error Context{\*\bkmkend _Toc503328811}{\*\bkmkend _Toc503337125}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par To be able to set another error trap, when one has already bean triggered, you must regain the error context like this:
\par 
\par Resume Regainingtheerrorcontext
\par Regainingtheerrorcontext:
\par 
\par After these lines, you can set a new error trap the normal way.
\par For more information, Please see:
\par The Error Handler Context
\par  
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328812}{\*\bkmkstart _Toc503337126}Top-level Procedure{\*\bkmkend _Toc503328812}{\*\bkmkend _Toc503337126}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par A Procedure that can be in the top of a call stack, usually an event like Click or MouseMove, but there are more 
subtle ones that can be harder to find like procedures used in Call back, form load, initialize, Activate etc. Another subtle toplevel procedure is the (Class)_Terminate event since raising errors in this event is not possible this is actually a toplevel 
event.
\par 
\par The code in a toplevel procedure differs from the code in a normal procedure in that that it can not raise errors. It is often appropriate to present a form to the users to inform them as specific as possible about the cause and effect (especially t
he integrity of the data) of the problem as well as possible remedies and fixes. 
\par 
\par }{\b Please Note: }{that for the proposed call stack tracing mechanism proposed in this paper it is crucial that the procedures that are toplevel procedures are configured as that 
otherwise the cascade error will be used inappropriately and your application will crash. 
\par 
\par For more info see:
\par Reference Counted Toplevel Procedures
\par Non Toplevel Procedures
\par  
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328813}{\*\bkmkstart _Toc503337127}Reference counted toplevel procedures}{\b {\*\bkmkend _Toc503328813}{\*\bkmkend _Toc503337127}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Some procedures can be both toplevel and n
on toplevel events. Here we propose to uses a reference count method to keep track of - if the procedure is a toplevel event or not - this time and the appropriately handles the raising of cascade error or showing of user info form. The reference counting
 
of course takes time. So, if you are quite sure that a procedure could never be or always will be a toplevel procedure, then use the explicit configuration of toplevel. In this case however error on the side of caution could be in place and set any doubtf
ul procedures as RC to be on the safe side, it will only add a small size and performance overhead. 
\par 
\par Please note the there are procedures that are not and can never be any thing else but toplevel like Class_Terminate , Main etc this should not be configured as reference counted top level events.
\par 
\par The Difference in the added code is not in the Default Error Processing (DEP) but in the code surrounding that, this code is necessary to determine if this is a toplevel or non toplevel procedure.
\par 
\par 
\par The method we p
ropose to use when implementing the reference count system is to use a locally dimensioned class, and it's Class_initialize  and Class_Terminate to add and remove procedures from the reference count system, it is simple to implement and safe, and the code
 involved can be cut and pasted because it does not need to be modified  depending on the procedure.
\par 
\par In the procedure 
\par 
\par Dim RefCount as  RefClass
\par Set RefCount = New  RefClass ' This will trigger the Class_Initialize 
\par 
\par When the Procedure Exits the Class_Terminate will be triggered 
\par 
\par And In the bottom of a reference counted toplevel event 
\par We would wrap the default handling code like this
\par 
\par IF RefCount.CheckRef = True then 
\par \tab It is a  toplevel event here you can place code that for instance present the 
\par \tab The user with a form to let them tell you what they where doing. 
\par Else
\par \tab It was a normal event, raise the call stack cascade error.
\par End IF
\par 
\par The Class Module 
\par *************************
\par Option Explicit
\par 
\par Public Function CheckRef() As Boolean
\par 
\par 'Used To check If the reference counted toplevel is a true toplevel event or not.
\par 
\par If RefCount_Internal = 1 Then
\par     Let CheckRef = True
\par Else
\par     Let CheckRef = False
\par End If
\par End Function
\par 
\par Private Sub Class_Initialize Class_Initialize ()
\par 
\par 'Used to increase the reference count
\par 
\par Let RefCount_Internal = RefCount_Internal + 1
\par 
\par End Sub
\par 
\par Private Sub Class_Terminate()
\par 
\par 'Used to descries the reference count
\par 
\par Let RefCount_Internal = RefCount_Internal - 1
\par 
\par End Sub
\par 
\par For more info see:
\par Toplevel Events
\par Non Toplevel Events
\par  
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328814}{\*\bkmkstart _Toc503337128}Non toplevel procedures}{\b {\*\bkmkend _Toc503328814}{\*\bkmkend _Toc503337128} 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {A procedure that is newer in the top of a call chain, for instance a function or sub, that is not called by a control or triggered asynchronously as an event, that is most procedures.
\par 
\par The Default Error Processing (DEP) code in a toplevel procedure d
iffers from the code in a normal procedure in that that it dos not raise the cascade error but presents the user info form. It is crucial that the procedures that are toplevel procedures are configured as that otherwise the cascade error will be used inap
propriately and your application will crash. 
\par 
\par For more info see:
\par Toplevel Events
\par Reference Counted toplevel procedures
\par  
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328815}{\*\bkmkstart _Toc503337129}Default Error Processing (DEP)}{\b {\*\bkmkend _Toc503328815}{\*\bkmkend _Toc503337129} 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par This is what happens when a nonhandled error is caught, that is an error that you haven't added any handling code for, one that your not aware of in development. It would be the Last part of a C style try, catch FINALLY
\par 
\par This paper proposes a handling of this errors that varies depending on the mode of development:
\par 
\par Debug mode. The default handling consist
s of basic info print and a stop and Resume 0 on one line. This gives you a possibility to handle any errors you expect, and edit everything in debug time. It also gives you the possibility to handle any unhandled errors since the code will stop then, Res
ume 0 will help you return to the offending line.
\par 
\par B.\tab  In distributed mode the DEP have tree different types
\par \tab      a. TopLevel Procedure
\par \tab      b. Non TopLevel Procedure
\par \tab      c. Reference Counted toplevel events}{\f1\fs24 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328816}{\*\bkmkstart _Toc503337130}Custom Cases, CC}{\b {\*\bkmkend _Toc503328816}{\*\bkmkend _Toc503337130}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par The errors you expect and have handled. In Debug Mode, You can add the If Err = X Then  You can edit this in debug time. They should be converted to a Case X in the Select Case Err statement for distribution.
\par This is technically identical but the If Err = X then offers editing flexibility, and the Select Case offers optimum performance. 
\par 
\par Please consider that you must NOT handle the cascading error to avoid interfering with the call stack tracing.
\par }{\f1\fs14\cf1 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328817}{\*\bkmkstart _Toc503337131}Error Trapping Configurations{\*\bkmkend _Toc503328817}{\*\bkmkend _Toc503337131}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par On the general tab in the option dialog, there are three options under an Error Trapping headline, these are supposed to allow you to configure how VB handles errors In the IDE, but they have several shortcomings
\par 
\par The most serious is that if you configure "Break on unhandled Errors" it really means in that the
re may be no error handler in the call stack. Therefore, when one of the procedures in a call stack has an error trap, the error will trap the errors for procedures lower in the call stack.
\par 
\par The problem with break on all errors is that it only works when y
ou have no handled errors, when you add your first common handled error. Then your handler will be ignored and execution will halt on this error line very time, this makes this option unusable.
\par 
\par Break in Class Module has one large problem in the fact that it dos not handle errors in modules, form etc.
\par 
\par So though the intention is good it dos not really work. Therefore, we must replace this configuration with a suitable scheme for handling errors on development time of our own.
\par }{\f1\fs14\cf1 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328818}{\*\bkmkstart _Toc503337132}Development and Compiled Mode{\*\bkmkend _Toc503328818}{\*\bkmkend _Toc503337132}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Development mode is the mode your applications is in when you are developing it win in the VB IDE. Compiled mode (either when you are testing or in normal use by the user) is when it runs as a compiled exe. The requirements of error handling is quite diff
erent as your will see.
\par }{\f1\fs14\cf1 \page 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328819}{\*\bkmkstart _Toc503337133}The Call Stack (Also: Call Chain){\*\bkmkend _Toc503328819}{\*\bkmkend _Toc503337133}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Is the way procedures and sub procedures is organized when the app is running.
\par The best way is to run example one and when you hit stop press Ctrl + L.
\par VB will then show you a list looking like this.
\par 
\par This is your call stack:
\par CallStackTestSub2 
\par CallStackTestSub1
\par CallStackDemo_Click
\par 
\par You can se the code in the procedures by selecting them and press show( or double click)
\par 
\par For more info see:
\par Cascading the VB call stack
\par  
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328820}{\*\bkmkstart _Toc503337134}Cascading the VB call stack{\*\bkmkend _Toc503328820}{\*\bkmkend _Toc503337134}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par One important concept in trying to understand how VB handles errors and how one shall design ones error handling scheme, are the VB Call stack and the Call Chain. This is an introduction to this concept. 
\par 
\par When an event procedure (Ex: click) is triggered it is entered as the first Stack frame in a Call stack (or call chain) then the call stack looks like this
\par 
\par CallStackDemo_Click <= Current execution point 
\par 
\par When a function is entered/called from that procedure that function (CallStackTestSub1) is added to the call stack below the first one in (later in the call chain), the call stack then looks like this:
\par 
\par CallStackDemo_Click
\par \tab CallStackTestSub1 <= Current execution point
\par 
\par Then the CallStackTestSub2 function is called from CallStackTestSub1. The call stack would then look like:
\par 
\par CallStackDemo_Click
\par \tab CallStackTestSub1
\par \tab \tab CallStackTestSub2 <= Current execution point
\par 
\par When CallStackTestSub2 is finished the function exits and execution returns to the caller (CallStackTestSub1). This is called to cascade the call stack (up) after that the call stack again looks like this.
\par 
\par CallStackDemo_Click
\par \tab CallStackTestSub1 <= Current execution point
\par 
\par Then when CallStackTestSub2 is finished the call stack returns to the original state.
\par 
\par CallStackDemo_Click <= Current execution point
\par 
\par When the Click procedure is finished the call stack is empty.
\par 
\par The best way to test this is to check out the "The VB Call Stack" Button in the demo.
\par 
\par But if you don\rquote t have that available you can set up a short test by adding a button to a form and a
 function call to the click procedure of the button. Then add a stop to the function and stop to the button click before and after the function call. Then run it in the IDE and at the first stop (before the function call) press Ctrl + L, this will show yo
u the call stack as it is at any particular time. 
\par 
\par Here's the code copy this code into a form with a button called Command1.
\par 
\par Private Sub Command1_Click ()
\par     Stop 'Press shift & L, and you will see the call stack
\par     Call MyXXXfunction
\par     Stop 'Press shift & L, and you will see the call stack
\par End Sub
\par 
\par Private Function MyXXXfunction ()
\par     Stop 'Press shift & L, and you will see the call stack
\par     Call MyZZZfunction
\par     Stop 'Press shift & L, and you will see the call stack
\par End Function
\par 
\par Private Function MyZZZfunction ()
\par \tab Stop 'Press shift & L, and you will see the call stack
\par End Function
\par 
\par For more information regarding errors and call stack, please see 
\par Errors And The VB Call Stack
\par For more info see:
\par The Call Stack / Call Chain
\par  
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328821}{\*\bkmkstart _Toc503337135}Errors and the VB call stack{\*\bkmkend _Toc503328821}{\*\bkmkend _Toc503337135}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par For general info on the VB call stack; please see The VB call stack.
\par 
\par When an error occurs in a VB procedure, VB will locate the closest active error trap in the call stack. This can be in the procedure itself or in one above it in the call stack, if 
none is found VBs default error handling takes over when VB finds an error trap it will execute it, like On Error GoTo Example. The error will appear as the error number from that procedure, this makes it virtually impossible to handle it correctly. This 
is what makes it necessary to have a error trap in all procedures.
\par 
\par The cascading style of VBs search for a active error trap is also what makes the Mini Code Add style possible in our product }{\field\flddirty{\*\fldinst { HYPERLINK "http://www.puccmultimedia.com/idh_iea.htm" }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b5400000068007400740070003a002f002f007700770077002e0070007500630063006d0075006c00740069006d0065006400690061002e0063006f006d002f006900640068005f006900650061002e00680074006d00
0000000000000000000000000000000000000000}}}{\fldrslt {\cs15\ul\cf2 IEA}}}{
\par 
\par For more info see:
\par Error Trap
\par The VB default Error handling scheme
\par Have an Error Trap in all Procedures
\par 
\par }{\f1\fs14\cf1 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328822}{\*\bkmkstart _Toc503337136}State Restore (Short){\*\bkmkend _Toc503328822}{\*\bkmkend _Toc503337136} 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Please not that this is only the definition and that there are a special topic that deals more with this in: 
\par Regarding recovering state/some general points on this uptime improving technique
\par 
\par This is essentially, what happens when you use rollback on a DB. It is a process that try's to do the opposite of any thing your application normally does to undo/rollback any changes that 
a process has done when it is trying to recover from an unknown error, to let the user continue working instead of just exiting the app.
\par 
\par Please note that I define state restores as a process that brings the application back form an unknown state, that is an unknown error, I don't include the error handling code dealing with known errors, this I call normal error handling.
\par 
\par For more information, Please see:
\par State Restore (Long)
\par }{\f1\fs14\cf1 \page 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328823}{\*\bkmkstart _Toc503337137}No Error Traps{\*\bkmkend _Toc503328823}{\*\bkmkend _Toc503337137}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par The first thing we are going to talk about is what happens if you don not implement any error traps at all.
\par 
\par }{\b - None in the call stack
\par }{In distributed time it's basically a dialog box saying run-time error XX (number and description) and then terminate your app (a could turkey end, no terminate events etc). If your deb
ugging form within the IDE, what happens will depend on the setting of the Error Trapping Option in the general tab in the option menu item, but as explained in detailed under that topic, none of the options are suitable.
\par 
\par }{\b - No Error Trap In A Called Procedure
\par }{If one procedure in the call stack contains an error trap and a lower lying one lacks one, and an error occurs the one that lacks one the error will cascade up the call stack until it comes to the first procedure with an error trap. Then the error wil
l be treated, as an error in that procedure. This is a big problem, in two ways either there are for that error then the default error handling will handled the error, this means that incorrect error information is stored making the debugging unnecessary 
complicated. Alternatively, if the trap contain handling for that error in that procedure, this code will probably be wrong for handling the actual error that comes from another part of the app. This is true both for development and compiled mode.
\par 
\par As you see neither of these scenarios are any good, and it' is easy to come to the conclusion:
\par Have an error trap in all procedures 
\par 
\par For more information, Please see:
\par Error TrapError Trapping Configurations
\par The Call Stack / Call Chain
\par The VB default Error handling scheme
\par No Error Traps
\par Cascading the VB call stack
\par Development and Compiled Mode
\par }{\f1\fs14\cf1 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328824}{\*\bkmkstart _Toc503337138}Error handling In Development Mode{\*\bkmkend _Toc503328824}{\*\bkmkend _Toc503337138}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Since most of the errors occur in development good, handling is one important thing if we want to keep programming fun. Fortunately VB ca
n assists us good here, it is surprisingly easy to implement an error-handling scheme suitable for the development situation( it is significantly more complicated in compiled mode. We have some goals for the trap in development mode
\par 
\par  - Allow us to handle any error, as we discover them.
\par  - Notify us when an unhandled error occurs.
\par  - Add Error Handling in Brake time
\par  - Edit Error Handling in Brake time
\par  - Allow us to Efficiently Debug Unhandled errors
\par 
\par Using a handler for known errors looking like this:
\par 
\par If Err.Number = 1 then
\par 'My Handling Code
\par GoTo Errorhandled
\par End if
\par 
\par And 
\par Errorhandled:
\par In the end of the procedure.
\par 
\par Gives you several advantages, you can Add/Edit/Remove them in Brake mode and they optimize performance buy jumping to the end of the procedure when an error handler has done its business.
\par 
\par In addition, for unhandled errors we could use some thing like 
\par Debug.Print a MsgBox or Debug.Assert to get to know what's going on
\par Then a normal stop to allow you to debug
\par Then a "Resume 0" to return to the offending line. It could look some thing like this:
\par 
\par Debug.Print "Error Number : " & Err.Number & ",  Error Description : " & Err.Description: Stop: Resume 0
\par 
\par This wraps up the quite simple issue of error handling in development mode.
\par 
\par As you see it' is easy to come to the conclusion:
\par Have an error trap in all procedures, }{\b AND}{ see to that you have appropriate default handling in debug mode, as the error taping options are inadequate.
\par 
\par }{\f1\fs14\cf1 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328825}{\*\bkmkstart _Toc503337139}Error handling In Compiled Mode{\*\bkmkend _Toc503328825}{\*\bkmkend _Toc503337139}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par When I said that error management was eas
y in development mode, I meant that we have several more problems in compiled mode. Since we are not there to debug the app (or we are not in the IDE), we need to make a "stand in" for our self that stores any relevant data. So that we can use that inform
a
tion later when we are debugging, either as we are testing the application our self, or when QA test is for us and eventually when we  get a support request from the user. I must say that this is one area where VB has us spoiled rotten, just by hovering w
e can find out the contents of a variable etc. To simulate this in compiled mode we will have to do many things and as if that was not enough we must watch performance. Goals for the error handling in deployed mode:
\par 
\par  - Handle any known errors 
\par  - Handle any unhandled errors in a default way
\par  - Store call stack at the point of error
\par  - Store variable content at the point of error
\par  - Allow the user to add additional Information visually.
\par  - Restore state to the state it was in before execution.
\par  - Be performance neutral and compact.
\par 
\par I am going to deal with these issues one by one.
\par 
\par }{\b - Handle any known errors.
\par }{The best way to handle errors we know as I see it is a select case statement, like this.
\par Select case Err.number
\par Case 6 'Handler for error 6 (overflow) 
\par Case X
\par (Case else
\par End Select)
\par 
\par }{\b  - Handle any unhandled errors in a default way 
\par }{Here the "Case Else" part is a perfect fit.
\par (Select case Err.number
\par Case 6 'Handler for error 6 (overflow)
\par Case X)
\par Case else
\par End Select
\par 
\par }{\b - Store call stack at the point of error.
\par }{I present two different ways to trace the call stack and arguments for and against.
\par 
\par }{\b 1.}{ One is to add a call to the top of every procedure that stores the procedure/module name and optionally procedure argument names contents (representing the start stat
e of the procedure). In addition, when the procedure (More info) you remove this from the list in the reversed order that they where added.
\par 
\par }{\b 2. }{The other way is to use a special error-handling scheme that allows tracing of the call stack only when an error
 has occurred. One way to implement this is to use a special error number that indicates that the stack is supposed to be traced. There fore, the normal execution would look like this:
\par - Execution reattaches a call some levels down in the call stack
\par  - An unhandled error occurs.
\par  - The default process of the handler stores the procedures internal state, and raises the cascading error.
\par  - The active trap in the procedure above in the call stack catches it and code execution ends up in the default section of the handling code, this causes the same thing as it did in the first procedure and so on.
\par - The cascade error reaches the toplevel in the call stack, this procedure, being a toplevel procedure contains 
\par     specials code that (se toplevel procedure for details) handles the error but dos not raise it.
\par 
\par There are arguments for both these ways; the obvious one argument against the first one is the performance.
\par Nevertheless, there are also arguments for it, it is very robust, with little effort and configurations it will do the job nicely.
\par 
\par On the other hand the other method is significantly faster (depending on number of procedure calls, the data traced and the technique used). But it requires care in configuring toplevel procedures, because if you fail to conf
igure a procedure as toplevel an error will be raised in it and VB default handling will step in, and that is not very pretty as you know. 
\par 
\par The difficulty in configuring the toplevel events should however not be over rated. Events are quite special things
 and can mostly be found automatically. Moreover, in most cases it must also be a toplevel procedure set to non-toplevel, this will bring out the VB default error handling. The opposite, a non-toplevel event configured as a toplevel event is usually not a
s
 bad because it will only cause the call stack cascading to terminate prematurely, this can cause two problems, first you offcourse loose the information that could have been logged in the above procedures. But secondly and more serious is that if you hav
e
 any state restore or cleanup code that needs to run on unhandled errors in the above procedures, this will not happen actually leaving your application in an unknown state. You can add additional safety to critical parts of your application by adding a w
ay for the application to know that an error has occurred and that no cleared stuff remains and then tack the appropriate actions.
\par 
\par }{\b  - Conclusion on tracing the call stack
\par }{Which one of these you shall use is up to you, but it is clear that the later probabl
y has a slight overhead in the beginning but will pay of in the end. Also consider: The over all trends towards an increased use of OO programming (OO tends to cause more procedure calls and there fore increases the additional over head in the first metho
d
). Also, consider reuse of code in components. And the fact that the performance lose in that procedure might seem insignificant when used in one context but might become important in another. Moreover, it is always better to chose one method and stick by
 it rather than implementing two separate ways.
\par 
\par }{\b  - Storing the state of an app on error, variable content etc.
\par }{The more you know about the state of the application when the error happened, the easier and more likely it will be that you find and truly under
stand the error(or errors). Therefor persisting state shall be a major concern to you when setting up an application for compiled operations. The internal state is one thing you would like to know, that is the value of all relevant internal stuff like var
i
able content, properties on object and controls. There is also "external" thing that can be interesting to know like amount of free HD, memory etc, the external state differs more than the internal state depending on your application type. However, if you
 define the things you would like to know when trying to fix any problems it would be easy to make a list of stuff you would like to know. For example:
\par System state (Use MSINFO32.exe if you can otherwise use the windows API to find the info you need.) 
\par Visual appearance (Capture the Screen, especially use full if you are doing visual ActiveX controls.) 
\par Allow the user to add additional Information visually. This is an easy one, just add a form that allows the user to add text to the log
\par 
\par }{\b  - Conclusion on Error handling in deployed mode
\par }{This is one of the biggest issues in error handling and will require a lot of effort to get right, and it is essential that you incorporate it in the design from the beginning. Also se to that you have the tools needed to do th
is rationally, Including a test-bed for all used techniques, a central documentation is also a essential, and as a add-in producer I must say that a few good add-ins can really help to }{\lang1024 {\field{\*\fldinst SYMBOL 74 \\f "Wingdings"
 \\s 10}{\fldrslt\f14\fs20}}}{
\par }{\f1\fs14\cf1 \page 
\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328826}{\*\bkmkstart _Toc503337140}Do's and Don'ts}{\fs28 {\*\bkmkend _Toc503328826}{\*\bkmkend _Toc503337140}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par The dos and don'ts in this WP are supposed to be a
 short overview list, checklist, and summary all at once. They are offcourse just general tips if you can find situations where you should modify or go against them I would probably agree with you in that particular situation (}{\i 
if you have any good examples please mail me at per@puccmultimedia.com so I can share them with every body}{). 
\par 
\par For some, there are a demo in the accompanying application so be sure to check it to see simple demo code in action.
\par }{\f1\fs14\cf1 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328827}{\*\bkmkstart _Toc503337141}Do's{\*\bkmkend _Toc503328827}{\*\bkmkend _Toc503337141} }{\fs28 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Hers some useful hints that I hope will make your life easier and your programming fun }{\lang1024 {\field{\*\fldinst SYMBOL 74 \\f "Wingdings" \\s 10}{\fldrslt\f14\fs20}}}{\lang1024  }{!
\par If you have any other tricks that you use, please mail me }{\field\flddirty{\*\fldinst { HYPERLINK mailto:per@puccmultimedia.com }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b020000001700000017000000700065007200400070007500630063006d0075006c00740069006d0065006400690061002e0063006f006d000000e0c9ea79f9bace118c8200aa004ba90b3c0000006d00610069006c0074006f003a00700065007200400070007500630063006d00
75006c00740069006d0065006400690061002e0063006f006d000000000000000000000000000000000000000000}}}{\fldrslt {\cs15\ul\cf2 per@puccmultimedia.com}}}{ so that we all can learn.
\par 
\par Integrate Adding Error Handling in Design/Development (Do Development/error handling at the same Time)
\par Integrate error handling in the code review process
\par Have an Error Trap in all Procedures
\par Understand Errors before you fix
\par Fix Errors carefully
\par Trace Call Stack
\par Trace Variable Contents
\par Implement Variable Snap Shot
\par Document Error Handling Carefully and Collected
\par Use Line Numbers (but watch out and don't over do it)
\par Save Line Numbered Code for Debugging
\par Use SetUnhandledExceptionFilter to handle the errors that VB does not.
\par Use Custom error Messages with Lots of information, the More the better
\par Use MSinfo32.exe
\par Always gather ALL data you can from the Field (Nothing like the Real Thing)
\par Include a Error system test in the application 
\par Log information Centrally
\par Consider Confidential Data in logs 
\par Use VBs Raise Error Approach, Do not use the API return approach the return value will be ignored.
\par Always have error handling in error handling code
\par Always have a Sub Main
\par Always check that your components work OK, on the local system before using them
\par Try to let the app continue to operate, as long as possible
\par Incorporate an easy and quick way to report error
\par Use a reminder feature to get people to report error
\par Defensive Coding
\par Allow your error reporting to be configured
\par Allow cut and past on all error messages (MsgBox is VERY irritating because it does not allow cut and past)
\par Use a dual implementation for error messages, both internal data and external file (DLL Or text file)
\par In general, have only one error handler in a procedure
\par Use a way that allows full cycle Add/Remove/ReAdd operations
\par Consider the differences between Client Vs Server Apps and components vs. Standalone
\par \page }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337142}Integrate adding error handling in design/development{\*\bkmkend _Toc503337142} 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par One of the best ways to get in to trouble with error handling is to add it at the end of a project. It wi
ll be more work than it would have bean to do it as an integrated part. It will not be as good as an integrated one. In fact, it will probably be quite lousy. In addition, you will get none of the benefits of good error handling in development, debug / QA
  / test time where the most errors happen and there fore you could have had the most use of it. 
\par 
\par For more information, Please see:
\par Integrate error handling in the code review process
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337143}Integrate error handling in the code review process{\*\bkmkend _Toc503337143}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Include a special p
oint code review process that focuses on the error handling to check that complies with the documented error handling principles for the project, and that all techniques used are included in the testing application, so that the can be verified easily.

\par 
\par For more information, Please see:
\par Integrate adding error handling in design/development
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337144}Include a Error system test in the application{\*\bkmkend _Toc503337144}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par It is always god to be able to test the error handling and tracing subsystem so I always include a Error testing Ester egg, a special combination of configurations and mouse clicks that I know will provide a predictable error.
\par This is positive form many points of view, naturally the more you test you\rquote re your sub system the better it will work. And it also makes every body familiar with the process of using the data from  the field,
\par (Reading, analyzing logs etc) 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337145}Have an Error Trap in all Procedures{\*\bkmkend _Toc503337145}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {Error protect all your code, the way to do this is to have an error trap in all procedure and one in all error handlers, but please
 notice that for the one in the error handler to work you must Regain the Error Context. To have any code but the absolute minimum unprotected is just asking for an error there, imagine not knowing if an operation failed or succeeded! . This should be any
 
"programmer" worst nightmares, I cannot se one single situation where having regular code that is not protected can be accepted. But as I see it, one must have a few lines with out a active error trap to avoid an endless loop, and also part of the logging
 code needs special error handling (try once then skip, also to avoid an endless loop). This should be rare enough to have little or no practical meaning.
\par 
\par For more information, Please see:
\par The VB default Error handling scheme
\par The Call Stack / Call Chain
\par Cascading the VB call stack
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337146}Understand Errors before you fix{\*\bkmkend _Toc503337146}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Spending time and effort to really understand and analyze and error is essential look at it from any point possible, with any scaffolding/testing code utilities you have, you could try to prepare 
a testing script for different situations and also send it to QA to get an as complete picture of the error as possible of the error where it occurs, when and what consequence it has ( Especially data integrity)  Do this }{\b BEFORE}{
 you design and implement a fix, its much better to fix a problem completely ones than to "Quick  Fix" it many times".
\par 
\par For more information, Please see:
\par Fix Errors carefully
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337147}Fix Errors carefully{\*\bkmkend _Toc503337147}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Fixing Errors are hard, probably allot harder than actually writing code from the scrat
ch, it was obviously obscure and far enough from your mind or experience both when designing implementing and testing to have slipped by you the first time ( Naturally depending on how long it's been there ) but when you have an error in any other situati
on then running a piece of cod the first time, you obviously have missed some thing and if its bean there a long time might tell you that you have problems with your Code Review, Testing, QA etc process as well. 
\par 
\par In fixing a bug, you should be at least as 
thorough and careful as you normally are when coding. You use your normal development cycle, Design, Code, Review, Test, QA etc. Also understanding and be familiar with the application and code you are fixing is naturally essential.
\par 
\par For more information, Please see:
\par Understand Errors before you fix
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337148}Trace Call stack}{\fs28 {\*\bkmkend _Toc503337148}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {To know the state of the call stack is a basic information and nobody denies that this helps in debugging. However, watch out, many of the methods suggested was developed in the days of procedu
ral programming and are "less suitable" for object oriented programming. This due to their large overhead per procedure call, se cascading the call stack reversed for more info. 
\par 
\par For more information, Please see:
\par Trace Variable Contents
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337149}Trace Variable Contents{\*\bkmkend _Toc503337149}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Knowing the internal state of the application at the time of an error is one of the really central things in debugging, and this is a are that VB really has us spoil we just need to hover over a variable etc to find out what it contains. Simulating
 this by storing the content of all variables in an application is a big task but it is one of the central ones when it comes to finding, understanding and fixing errors. The basics of trace variable contents is not that hard, Pass all variables in module
s and procedures etc to functions that (convert them then ) stores in a log. 
\par 
\par Practically this is quit hard, error prone, and its quite a lot of work. This is one of there areas where a adding really can help you. Variable tracing should be an essential fe
ature you should require from any add-in you look at. Also check out the viewer that you use to inspect the trace and find and understand the error, You are going to spend a lot of time working with it.
\par 
\par For more information, Please see:
\par Trace Call stack
\par Consider Confidential Data in logs
\par Do not send logs with e-mail without prompting the user.
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337150}Implement Variable Snap Shot{\*\bkmkend _Toc503337150}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par If you implement variable contents trace correctly you should be able to implement a snap shot possibility to be used when the application dose not work OK, but dos not cause an error. This should allow you to find out way it dos not work OK.  
\par }{\f1\fs14\cf1 \page 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337151}Document Error Handling carefully{\*\bkmkend _Toc503337151}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {To centrally, document and implement a test and evaluation application, the approach used in a project(s) and
 any procedures where custom versions are coded is a good thing to have. Both to communicate between different team members and different parts of a team (Design, Development testing (QA) Customer Support) not to mention that this is very good for new tea
m members and consultants, it also brings that decisions in to the light and makes them more tangible. (If you want to use this WP and accompanying app in part, modified etc it's OK, mail me for more info at }{\field\flddirty{\*\fldinst { HYPERLINK
 mailto:per@puccmulltimedia.com }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b020000001700000018000000700065007200400070007500630063006d0075006c006c00740069006d0065006400690061002e0063006f006d000000e0c9ea79f9bace118c8200aa004ba90b3e0000006d00610069006c0074006f003a0070006500720040007000750063006300
6d0075006c006c00740069006d0065006400690061002e0063006f006d000000000000000000000000000000000000000000}}}{\fldrslt {\cs15\ul\cf2 per@puccmulltimedia.com}}}{) 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337152}Use Line Numbers{\*\bkmkend _Toc503337152} 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {(But Watch Out and do not over do it)
\par 
\par Erl is Probably the best hide feature in VB it simply gives you that line number for the latest error. As zero if the line has no error number and the other lines in that Proce
dure has no line number if a prior line has a line number, that number will be reported. Additionally if a procedure has error line numbers, but no error trapping and an error occurs, the error will cascades up the call stack to a procedure with error tra
p
. Here one of two things can happen. Case one, the not so bad variant is that this number does not exist in this procedure. Then you will probably understand that there is some thing strange going on. Case two, if there is a line number on the line that c
a
lled the sub procedure that number will be reported, otherwise the closest error line number in the call chain will be reported. As this makes debugging harder,  this is offcourse not good. That is if the line number actually exists and you are set on the
 wrong track in your search for the cause of the error. Getting the wrong line number can also mean that any automatic analyze you want to do on that line will get in to trouble. 
\par 
\par In the practical process of adding line numbers there are some things to con
sider. Among them are: Not all Lines in VB that can have a line number: Among these are lines (other than the first) using the line continuation character " _" The first Select case in a select case statement Block etc. Therefore, in doing/testing utility
 that add/removes line numbers its important to test these things.
\par 
\par Then there are the issues of overhead, Line numbers do add a certain amount of overhead. For execution speed they are virtually uninteresting, but the do make the code harder to read when d
ebugging. So adding them to all lines is not necessary, there are some lines that "can't" be the source of an runtime error, like comments, white space (:-)), variable declarations (Dim etc) and End If, End Selects etc. A good line numbering routine shoul
d avoid as many of this as possible, Offcourse it is better with a line number to many than getting the wrong line number in an error log.
\par 
\par Setting up a good way of storing the code including line numbers (all versions used) is offcourse necessary. Otherwis
e getting a line number in a report is useless if you can't actually get back to the source and look at it (here you offcourse see the necessity of identifying the actual code revision that the error report comes from)
\par 
\par So the conclusion on line numbers is USE THEM they are important no mater how BASIC they are, add them to every were they are needed and only there. Save line numbered version of the source code for debugging
\par 
\par For more information, Please see:
\par Save Line Numbered Code for Debugging
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337153}Save Line Numbered Code for Debugging{\*\bkmkend _Toc503337153}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par When using line numbers you must remember to save the code that you compile because is you cant go back to the code when you get a error message back chances are that the line number are more or less wrong. If you add and remov
e lines above a numbered line eventually you would have to change the line number and then the line number from the field would be useless,.
\par 
\par Also consider that you need to be able to connect the compiled exe with the correct code containing line numbers. This is a consideration both for the error log and the saving of the code.
\par 
\par For more information, Please see:
\par Use Line Numbers
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337154}Use SetUnhandledExceptionFilter{\*\bkmkend _Toc503337154}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Use SetUnhandledExceptionFilter to handle the errors that VB does not. All tough most errors ar
e caught by VB and there fore can be caught by your "On Error GoTo" But as most things this is not a fool proof method. So using the API SetUnhandledExceptionFilter to catch ANY error is a good precaution.
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337155}Use Error Messages with lots of information in them{\*\bkmkend _Toc503337155}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Error information's, one of the most under used feature I have ever seen, I think you can use The Err.Raise (xx) for a lot of good stuff. I, Normally have at last a description, knowing what file wasn't found and where it is supposed to be is much bett
er than just that a file wasn't found, this is true in all stages a project goes through, development, QA and testing, support etc. Another good thing is to include possible remedies, web address, mail address, One thing I really like is to include is GUI
D
s to uniquely identify the error out of different perspectives. By being easy to produce and unique the offer several benefits, one of the best is one has a unique id for this particular error, this error location in the source, the type (DB, file etc) of
 
error. This is good in several situations, when searching the web (or Intranet) when reporting an error etc. If you can find out other stuff to use this text strings for DO it, you will not be sorry. (If you worry about size etc se "Use a Dual Implementat
ion for Error Messages" for more info on how to implement this flexibly).
\par 
\par But please not that there is a string length limitation on this, in two ways, first the VB default error MsgBox Only shows you about 400 characters, and the Err.Description attribute is truncated after around 530 characters.
\par 
\par For more information, Please see:
\par Allow cut and past
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337156}Use MSinfo32.exe if possible{\*\bkmkend _Toc503337156}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par This little utility that is included with MS products is a very nifty thing. There is only one problem, it can only be used if p
resent. The fact that you can not guarantee that it will be present makes it less useful. I would say that using it is good but do not relay on it for information you know you will have to know when debugging, find that stuff your self, and use MSinfo32.e
xe to get the rest. And Please test it and check out if  it gathers information relevant to you. 
\par 
\par For more information, Please see:
\par Do not trust MSinfo32.exe as the only source of system information
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337157}Always Gather ALL data you can From the Field{\*\bkmkend _Toc503337157}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {(Nothing like the Real thing!).
\par 
\par This is a very important, gathering all data you can from the field is very important. Some things should be "mandatory" application internal state (variable content, object property values and Call stack). Then there are things that
 can definitely help like version and install status in any DLL's necessary for your app to work, a basic system run true (system DLL versions etc) memory and HD If you develop visual controls, a snapshot of the desktop might b a good idee. (Do not forget
 to compress it before sending it, tough.)
\par 
\par For more information, Please see:
\par Use MSinfo32.exe if possible
\par Trace Variable Contents
\par Trace Call stack
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337158}Log Information Centrally{\*\bkmkend _Toc503337158}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Assemble all information centrally in one place in a structured way for reference and analyses.
\par Add information about, key word, function, object etc involved error, fix project part, module, procedure.
\par In a corporate environment, you could set this up to be dynamic. So that you can actually see the errors as they happen (possibly usin
g Mail or MSMQ). This will give you a good overview of the status of an application. It also helps you manage your work (what error is effecting most people, the most critical task etc) }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337159}Consider Confidential Data in logs{\*\bkmkend _Toc503337159}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par The internal state of the applica
tion that is loged when an application experience an error consists of both the applications internal data and the data the user was working on at the time of the crash. This makes it very important to handle the security concerns in this mater. My advise
 
is to show the user what is in the log and let the user set up error handling so that the log will be sent to a internal location for review before being sent to you. This will probably be done by the IS department, In collaboration with the security depa
r
tment. Remember that the users data is their property. If sending a log to concerns your user you ask them to repeat the error on non confidential test data, and send you that log, or maybe clean the confidential data out but leave the rest. If your lucky
 you can find the error with this subset off traced date.
\par 
\par For more information, Please see:
\par Do not send logs with e-mail without prompting the user.
\par Trace Variable Contents
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337160}Use VBs Raise Error Approach; Do Not Use the API return Approach{\*\bkmkend _Toc503337160} 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par If you use the A
PI return approach, the return value will be ignored if possible. VBs way of handling Call Success / fail reporting is not consequent. It includes both the Raise (VB) way and the returnee value (API) approach. My definite advise is chose one and stick by 
it. My recommendation is "Use the VB way", it have no series problems and is safer, how many of us have some time "skipped" to check a return a value and handle ALL Correctly }{\lang1024 {\field{\*\fldinst SYMBOL 74 \\f "Wingdings" \\s 10}{\fldrslt
\f14\fs20}}}{ thought so }{\lang1024 {\field{\*\fldinst SYMBOL 74 \\f "Wingdings" \\s 10}{\fldrslt\f14\fs20}}}{ but skipping a raise error is harder.
\par 
\par For more information, Please see:
\par Do not use the API return Approach
\par Use Error Messages with lots of information in them
\par Do not use the API return Approach
\par Allow cut and past
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337161}Always have error Trap/Handling in error Handlers{\*\bkmkend _Toc503337161}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par This is the basic role on error management in VB with out an error trap and at lest default error handling
\par In every procedure, this is mandatory and should always be used.
\par 
\par For more information, Please see:
\par Default Error Processing (DEP)_WP
\par Error Trapping Configurations
\par Error handling In Development Mode
\par Error handling In Compiled Mode
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337162}Always Have A Sub Main{\*\bkmkend _Toc503337162}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par At least one important reasons to have a sub main instead of staring in a form, is that if a control fail to load in the form and that is your startup module VBs default error management will handle the error in a very ugly way.
\par 
\par For more information, Please see:
\par Always check your Components availability
\par Never Raise Errors in Events that can't cascade (Initialize, Sub Main etc)
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337163}Always check your Components availability{\*\bkmkend _Toc503337163}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Check the local system before using custom controls (including loading forms that contains them) checking that any necessary DLL's is available, including versions) and correctly installed is a code way to avoid problems.
\par One way to do this is to use the dynamically load controls just to check 
that they load properly, if any control do not load, you will at least know what control did not load. You can also check version numbers for compatibility and only continue if it is the same or later. Ask your component supplier for the appropriate check
s they shall be able to say.
\par 
\par For more information, Please see:
\par Try To Let the App Continue
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337164}Try To Let the App Continue To operate, as long as possible{\*\bkmkend _Toc503337164}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Few things are more annoying than an app that ends because the configuration of scroll bar color failed
\par Use a state restore process and recovery process to try to let the user work on with a warning etc
\par 
\par For more information, Please see:
\par State Restore (Short)
\par Regarding recovering state/some general points on this uptime improving technique
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337165}Incorporate an Easy and quick way to report error{\*\bkmkend _Toc503337165}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par You can make it easy to report errors by assembling a mail that is reedy to send. Please note, that sending it automatically is probably not a good idee (If you have not made this clear to the user and given them the oppo
rtunity to configure this (On, Of, Preview). In addition, always allow the user to preview ALL data being sent before actually sending it. Storing all info in a text file on the HD for the user to send in, is another approach. In addition, any way of repo
rting an error, you chose, should not take more than 5 minutes.
\par 
\par For more information, Please see:
\par Do not send logs with e-mail without prompting the user.
\par Allow cut and past
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337166}Use a reminder, to get people to report error{\*\bkmkend _Toc503337166}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Having some kind of unintrusive re
minder, that is activated a time after an error, reminding you that you should report the errors you experienced. In designing and implementing this there are several things you have to consider. Among them are server applications, and as in the error rep
o
rting procedure also to implement the reminding procedure so that it does not disturb the user, and does not require any steps to ignore( no buttons to click, forms to close). Also explains way it is so important that all errors are reported. The best arg
ument of all are that the greatest benefit will be to the users them self, in simply experiencing less errors, getting more work done etc. You can always mention any rewards for reporting errors (Like Free T-shirts etc, gift certificates etc.) 
\par }{\f1\fs14\cf1 \page 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337167}Defensive Coding{\*\bkmkend _Toc503337167} 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\fs28\cf2 
\par }{Of all the things that can help you, the one I think is best is defensive coding. It really is about asking for permission, rather than wait for an error. This has several positive effects and a few problems. Here are a few pointers that can help you.

\par 
\par Check that the operation is likely to succeed, before executing it. However, watch out for changes in state.
\par Isolate operations you know could generate errors (that have handled errors) to minimize the error handling code in the caller, this is used where the state can change between a "ask permission" and the execution call.
\par Design routines defensive, test key operations before you enter the rest of the routine.
\par 
\par One Problem with the "Ask Permission" style of defensive programming is that state can c
hange between the "ask" and execute call, this is a problem for external states, like file operations, and multithreaded applications. It is critical that you identify these operations and use the isolation technique here instead.
\par 
\par The three big benefit of this technique is the reduction, simplification, and collection of error handling code. 
\par The code becomes smaller because only a few errors are handled in one procedure. 
\par It becomes simpler because there is usually only a return value to set.
\par These techniques collects the code for error handling for several points of the application in to one point, adding and editing this will be allot easier than if the code was spread over the hole application.
\par 
\par This technique also simplifies the normal procedure code b
ecause the "Ask Permission" style transforms the program form a "coped up" flow, where the flow can be transferred from the natural execution order to the error handler, to a "In Line" Flow of successive operations that can succeed or fail. This makes cod
e easier to read and follow and your less likely to introduce errors when editing the code.
\par 
\par If you constantly check as much as possible in you will have code that also is easier to write maintain and that gets a much better structure. So, Perform as many c
hecks as early as possible, maybe already in the beginning of a procedure, then if needed, exiting and state restore will be much easier. Also, continue to perform all possible checks as early as possible in the execution of the procedure code, for the sa
me reason.
\par 
\par For more information, Please see:
\par Always check your Components availability
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337168}Allow your error reporting to be configured{\*\bkmkend _Toc503337168}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par It is important to let the user configure how errors are reported and where. Possible configurations could be: If a UI shou
ld be shown, this important if you want the application to be useable both as a standalone application and on a server or with a command line interface. To what e-mail address the report should be sent, possibly with different mails for different errors (
including default one), the error category when added to the windows NT log, the user might have actions tied to the type. Possibilities to call a component on application error to let the users do what ever they want could be a cool idee.
\par 
\par For More Information See:
\par On Error Logging
\par Consider the differences between Client Vs Server
\par Consider how your app is supposed to be used 
\par }{\f1\fs14\cf1 \page 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337169}Consider how your app is supposed to be used{\*\bkmkend _Toc503337169} 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par A flexible application can be used in several ways among them, direct, unattended, o
r from the command line as a component in a system). If you write server components you cannot, for obvious reasons use the UI to report errors so using an alternative approach is necessary. Reporting to the error log is one way. By mail to any destinatio
n
s is good (Help Desk etc). If you do a user application that reports to alternative destinations, it can be a good to let the user get some note (not MsgBox:-). In addition, if you do components please consider that you have two customers, both the compon
ent integrator and end user. Try to offer configuration possibilities to both. 
\par 
\par For more information, Please see:
\par Consider the differences between Client Vs Server
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337170}Allow cut and past on all error messages, a normal MsgBox is VERY irritating{\*\bkmkend _Toc503337170}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par A normal MSG 
box is VERY irritating because it does not allow C&P. when putting up a UI to report an error or a state don't use a MsgBox. The MsgBox dos not allow Cut and Past to save the message, instead use a custom dialog to show the message, this way the user can 
at-least cut and past the message for future referents)
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337171}Use a dual implementation for error messages{\*\bkmkend _Toc503337171}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par One often here a recommendation to store error messages out side the actual Exe, and I must say I fully supports this it is a flexible way with many possi
bilities (different language versions, updates including new remedy try's etc)? However, to make the system more robust I suggest that you have a "default" set in the app so that if a failure happens you will be able to show atlas some thing, and that you
 do not have to fail on the account of error Missing messages configurations }{\lang1024 {\field{\*\fldinst SYMBOL 74 \\f "Wingdings" \\s 10}{\fldrslt\f14\fs20}}}{  
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337172}In general, have Only One Error Handler in a Procedure{\*\bkmkend _Toc503337172} 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Although I recommend having an error trap active in error handling code, I do not recommend multiple error handlers butt rather modifying one error handler to serve several purposes. This makes things much easier and "Cleaner."
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337173}Full cycle Add/Remove/ReAdd as an important feature in maintaining consistency{\*\bkmkend _Toc503337173}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Any error handling model you use it will evolve over time, this m
ight have several reasons. VB will change (VB7?) or the standards with in the company will change. Your demands on the error handling might change, OO programming, Development VS Deployed, so the conclusion here is that which ever way you decide to practi
c
ally do this it should support full round trip workflow where you can automatically upgrade to adapt to the new situation. With out requiring any more "hands on work" than necessary. One of the best examples of this is the different demands that call stac
k tracing faced in structural programming vs. object oriented programming, the way used in SP is quite inappropriate for OO programming.
\par }{\f1\fs14\cf1 \page 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337174}Reentry protection{\*\bkmkend _Toc503337174}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par When you handle errors in error handlers, you get the problem of reentry. That is an error in the 
handler will come back to the handler, (as it must, se error handling in error handlers in error handlers for more info) but this introduces the tricky problems if reentry and there fore endless loops. If an error X causes the error trap to trigger and, i
n
 ether the clean up code or your handling code, triggers the same error an error should come back to the error handler and you can be caught in a endless loop bet win the errors. So we must limit the usage of error handling and allow your handling, and th
e default handling code to know if, and what of the error handling code that has run before. (Default procedure doesn't need to know if this is the first error, it only needs to know if it's the first unknown error)
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337175}On Error Logging{\*\bkmkend _Toc503337175}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par One good way of storin
g error information is using the VB Call App.LogEvent ("Text," x) and X = vbLogEventTypeError, vbLogEventTypeWarning, vbLogEventTypeInformation. One tip here is to make the Event Type, configurable VbLogEventTypeError, vbLogEventTypeWarning, vbLogEventTyp
eInformation because some users might have actions connected To the log and type (send mail, SMS etc)**
\par 
\par Please note that this does not work in the IDE, the stuff you log wont show up in the log, compile, and try again, then the stuff you log will be there. 
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337176}Store Err Object Attributes Immediately{\*\bkmkend _Toc503337176}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par One could presume that the Values on Err.Number for instance would remain the same until you used the Err.Clear. That is not so, ether that data has changed (by another error) or is reset by an "On Error..." eith
er in the procedure or in a sub procedure, so persisting the data is the first thing you shall do. Please not that you can call a procedure, as this will not change the data.
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337177}Consider the differences between Client Vs Server Apps and components vs. Standalone{\*\bkmkend _Toc503337177}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Error handling and particular reporting differs quite substantively between server applications and client applications and between components and standalone applications. So, please consider what is appropriate for what you are developing. In genera
l you should not put up a UI In a server app, though you can let the user configure this, It can be help full debugging a problem. Although providing a default error handling system for a component is a good thing, you shall let the user configure your er
ror handling as much as possible.
\par For Standalone applications please consider that most of the time not only the actual user might be concerned by and error, but also the administrator, so provide a way for the IS department to get information about the err
or, that way the can support the user much better.
\par 
\par For more information, Please see:
\par Consider how your app is supposed to be used 
\par }{\f1\fs14\cf1 \page 
\par }\pard\plain \s3\keepn\widctlpar\outlinelevel2\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328828}{\*\bkmkstart _Toc503337178}Don'ts}{\fs28 {\*\bkmkend _Toc503328828}{\*\bkmkend _Toc503337178}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par In this section I will deal with stuff that can get you in to trouble, If you have any more things that have played tricks on you please mail me }{\field\flddirty{\*\fldinst { HYPERLINK mailto:per@puccmultimedia.com }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b020000001700000017000000700065007200400070007500630063006d0075006c00740069006d0065006400690061002e0063006f006d000000e0c9ea79f9bace118c8200aa004ba90b3c0000006d00610069006c0074006f003a00700065007200400070007500630063006d00
75006c00740069006d0065006400690061002e0063006f006d000000000000000000000000000000000000000000}}}{\fldrslt {\cs15\ul\cf2 per@puccmultimedia.com}}}{ so that we all can learn.
\par 
\par Do not see error handling as some thing to do in the end of a project
\par Do not use stupid/blind error handler after the development process is finished
\par Do not raise errors in events that can't cascade (Class_Initialize? Class_Terminate, Sub Main, etc)
\par Do not send logs with email without prompting the user
\par Do not trace calls stack on the way down
\par Do not trust the user to tell you what has happened
\par Do not wait for VB7
\par Do not use On Error Resume Next indiscriminately
\par Do not reraise errors
\par Do not write fallthrough handlers
\par Do not use the API return approach
\par Do not trust MSinfo32.exe as the only source of system information
\par Do not think a tool can do it all for you, the can help but that is all they can do
\par Do not use a MsgBox for error reports (se allow cut and past on all error messages)
\par }{\f1\fs14\cf1 \page 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337179}Do not see error handling as some thing to do in the end of a project{\*\bkmkend _Toc503337179}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Probably the most important "don
't do" is to consider error handling some you do when you are done with the actual coding. This will lead to nothing but trouble. You shall se error handling as an integrated part of design and development, that it is a part of the testing is natural. Inc
l
uding error handling from the beginning will give you several nice benefits, including shorter development time, more feature rich, or cheaper product, better kept timetable, more satisfied staff etc. You naturally wonder how I can say this, so here is a 
short explaining story, See if you agree with me\'85
\par 
\par Lets start at the beginning, by some reason you decide that you need a computer application,
\par 
\par }{\b  - The brain storming 
\par }{Here you find out all the stuff  that you want the application to do. The cool GUI you wa
nt to have. In this phase, you shall spend some time thinking about the new, cool, creative bug handling technique the application is going to use to make it the most stable app ever done.
\par 
\par }{\b  - Design.
\par }{Now you have to bring all these cool idees in to one co
herent application. By sorting out what dos not go in the app what does go in and where it goes. One Of the important factors when you decide what features to include in your application should be the quality aspects of them, Are they easy to debug ? , Ar
e
 they easy to error handle. No feature, no mater how cool will be any good if it dos not Work OK. And it is widely accepted that a small number of the features in an application most often will stand for a large part of the problem. Here is also a good pl
a
ce to define the over all guiding principles regarding error handling in this application. This should normally be done by, changing or amending the company's central error handling principles. Do not forget to add it to the accompanying test and evaluati
on application. Also, identify special problems like critical data, intended user, user mode (server, component, Standalone, or a combination). Also, decide how to document errors and solutions.
\par 
\par }{\b - Development
\par }{Now you have started to develop the application
s, and by implementing the error-handling scheme you decided to use, you will find errors during development, also be able to fix them fast because your handling is suitable for development. This is very important because most errors are found in developm
ent and can be fixed easily there.
\par 
\par }{\b - Testing (CA) 
\par }{Testing starts with components and then the complete application, you will find many errors here, but usually not in debug mode, so tracing as much data as possible is rely important, this will make it pos
sible for you to fix them easy and fast. And can you imagine what this is going to do for moral, not having to handle errors with no information to go on, time and time again, But rather having a good log of every thing you ever considered related to your
 application
\par 
\par }{\b - Beta 
\par }{The most important difference between testing (CA) and beta, is that testing is mostly an internal affair but a beta cycle is more or less public, so finding few errors, and being able to fix them fast reflects on your company reputati
on. Also having got the volume of bugs out you can concentrate on the hard ones, and get more opinions 
\par Other than bugs, maybe, what about the UI etc. In addition, remember that the better your beta works, the more testers you get.
\par 
\par }{\b - Distribution 
\par }{When yo
u have released your application to users, fixing errors, and supporting and your application becomes a question of economics, the fewer support calls you get the less money it's going to cost you, and there is also market share and reputation to consider
.
\par 
\par }{\b - Next version
\par }{When you are getting ready to develop the next version of the application, you can check out the error statistic to check out what parts of the applications that can benefit from Re-Design (always start there) or a rewrite. 
\par 
\par }{\b -}{ }{\b Conclusion
\par }{
To include error handling in the hole development process is probably the most important thing I say in this WP. Some might se this as a mostly increased cost or workload or that it will cramp their creativity or style, but as I hope, I have shown its rel
ay the opposite. As a final thought\'85
If you thing taking the extra time in the beginning (by the development stage your actually earning time) to develop an implement a good error handling scheme is hard, Including resisting managers, and sales departments or your own urge to "start coding" 
}{\lang1024 {\field{\*\fldinst SYMBOL 74 \\f "Wingdings" \\s 10}{\fldrslt\f14\fs20}}}{ etc.
\par Try to fix a flood of errors, with none or very little information to go on, with the above mention parties all breathing down your neck :-).
\par 
\par For more information, Please see:
\par Integrate adding error handling in design/development
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337180}Do not wait for VB7}{\fs28 {\*\bkmkend _Toc503337180}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\fs28\cf2 
\par }{There have been many rumors regarding VB7 and the implementation of "try catch" style error handling.
\par Although this is positive, it dos not change the underlying principles of error handling. In addition, it can be simulated in VB to day, and shall be quite easy to convert later. So, get going to day a de ready.
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337181}Do not use stupid/Blind error handler after the design/development process.{\*\bkmkend _Toc503337181} 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\fs28\cf2 
\par }{This equals "On Error LoggErrorThenQuit". Offcourse this is better than no error 
management at all. Nevertheless, it is by no way good enough. You get nearly all the work for only a small part of the benefit. Watch out for tools that do this for you and promise the world. If a add-in doesn't let you inspect the code added it is no goo
d (yes there are examples on this) even as a add-in producer I say that no mater how good an add-in is it can't do the work for you. However, it can surely help you do it in the most efficient way possible.
\par 
\par For more information, Please see:
\par Integrate adding error handling in design/development
\par Error handling In Development Mode
\par Error handling In Compiled Mode
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337182}Do not send logs with e-mail without prompting the user{\*\bkmkend _Toc503337182}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\fs28\cf2 
\par }{To clandestinely send logs containing the programs internal data, actually the users data, w
ith out prompting the user and clearly show what is about to be sent, would be a very offensive behavior, and shall obviously not be done. You can send logs automatically only if the user is aware of it and has a configuration possibility.
\par 
\par For more information, Please see:
\par Consider Confidential Data in logs
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337183}Never Raise Errors in Procedures that can't cascade (Initialize, Sub Main etc){\*\bkmkend _Toc503337183} 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\fs28\cf2 
\par }{Certain procedures are treated like toplevel procedures  (Non RC) because that they cannot cascade errors up. If you rai
se an error in one of this procedures VB default error handling will step in and as you know we do not want that. Please note that this will happen even if the caller has an active error trap. 
\par 
\par For more information, Please see:
\par Top-level Procedure_WP
\par Non toplevel procedures_WP
\par Reference counted toplevel procedures_WP
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337184}Do not write fallthrough handlers{\*\bkmkend _Toc503337184}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par A fallthrough handler is a handler that uses the handler code in more then one error case, to handle an error.
\par This can look quite attractive at first, it s
aves code, reduces code repetition etc. However, it also binds the handling of different errors together just because they happen to be in the same procedure. This will give you a number of problems. For instance when you need to handle errors of the same
 
type in one central location. In addition, it increases the overhead for a programmer trying to under stand your code. It also makes the error handling dependent on the order of the handlers and this will probably give you trouble in the future. And they 
c
an be a real problem when parts of the code changes and then the error handling for that part naturally must change to, but the other errors handling code requirements might not have changed. Please note that it is important to add the appropriate Exit st
a
tement (Sub, Function or Property) even to the last handler, because it is very easy to forget doing this when you add another error handler later. Also, note that the handler that is recommended in this WP dos not have this problem, because it is based o
n select case in compiled time.
\par 
\par For more information, Please see:
\par Error handling In Development Mode
\par Error handling In Compiled Mode
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337185}Do Not Trace Calls Stack on the way down}{\fs28 {\*\bkmkend _Toc503337185}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\fs28\cf2 
\par }{This might seem as strange advise but in modern Object, oriented programming mos
t people would agree that it simply introduces a too large over head to call two quite complex methods at the beginning and end of every procedure call. (for information on how to guarantee the end call Check RC toplevel). 
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337186}Never trust the user to tell you what has happened{\*\bkmkend _Toc503337186}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par How many times have we heard? "It said some thing about cannot load or cannot find or was it overload or flow?" Or the good old "it doesn't work" so if you can gather the data for your self DO SO for your own good.
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337187}Never Use On Error Resume Next Indiscriminately or as a cure all{\*\bkmkend _Toc503337187}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Using "On Error Resume Next" in any thing but a very limited scope is EVIL and should not be done. 
\par It amounts to nothing better than allowing the user to skip random line(s) in your carefully designed, develo
ped, tested, and documented app, allowing general "On Error Resume Next" throws all this out the window and all bets are of. However, allowing on error resume next in a VERY limited scope, preferably one line or at the maximum a small number of lines is a
n acceptable practice and should be used where appropriate. Offcourse if you do use "On Error Resume Next" document where and way and how carefully.
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337188}Don't Reraise Errors{\*\bkmkend _Toc503337188} 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Reraising the same error, you got are a practice that should be limited to the maximum; it is always better to wrap the original error in a definition that is better suitable for the situation instead of just using 
\par The file not found, say the Configuration file XX was not fond at C\\:xx\\xxx\\xx\\ or in path or ...
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337189}Do not use the API return Approach{\*\bkmkend _Toc503337189}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par We all know the return value will be ignored if at all possible, use VBs Raise error approach
\par It might not be flawless but it is the best we got.
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337190}Do not trust MSinfo32.exe as the only source of system information{\*\bkmkend _Toc503337190}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Although it will be present on most systems it's not always present and there for you have to implement your own way to find out critical stuff for your application and only use it for the rest, the volume stuff so to say.
\par It is especially god on collecting DLL stuff.
\par }{\f1\fs14\cf1 
\par }\pard\plain \s4\sb240\sa60\keepn\widctlpar\outlinelevel3\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503337191}Do not think a tool can do it all for you\'85{\*\bkmkend _Toc503337191}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\'85the can help but that is all they can do.
\par 
\par Tools often promise that hey can take care of every thing and actually "bullet Proof" your app and that you would not really have to do any thing, just lean back and enjoy the ride. Thi
s is B*LL S*IT, error handling will always be a major task for you as a programmer. However, as an add-in vendor it would be very strange if I said the tool are useless, on the contrary I think that they are a necessary to handle all the tasks in an error
 handling scheme. And they can surly make it easier and faster. And If you are thinking of quickly coding your own tool, I can only wish you good luck, it is not that easy, but as vendor I would say that wouldn\rquote t I }{\lang1024 {\field{\*\fldinst 
SYMBOL 74 \\f "Wingdings" \\s 10}{\fldrslt\f14\fs20}}}{. I do think it would be hard to do for the 80 US $ that our tool cost.}{\f1\fs14\cf1 
\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328829}{\*\bkmkstart _Toc503337192}Regarding recovering state/some general points on this uptime improving technique{\*\bkmkend _Toc503328829}
{\*\bkmkend _Toc503337192}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par }{\b  - Definition
\par }{I define state restores as a process that brings the application back form an unknown state, that is an unknown error, I don't include the error handling code dealing with known errors, this I call normal error handling.
\par 
\par }{\b  - Introduction 
\par }{The basics of SR is simple, when some thing goes bad, we just reverse all actions back to some "Safe Point" in the app. This all seems simple and
 strait forward but as most of you quickly understand the practical problems can be tricky, some series considerations must be made. I will try to explain the basics, as many different considerations, as well as ways of doing SR, each, for different situa
tion.
\par 
\par }{\b  - Considerations.
\par }{State restore is truly the holy grail of error handling, just imagine an app that would tell you that it could not do this or that right now pleases try later, and letting you go on... however, as the grail, this can be more illusi
ve than you think. However, if we can just gets some of this effect or only in part of an application, allot will be won.
\par 
\par }{\b  - Significant or not significant.
\par }{Avoiding application crash and storing internal data, for debugging purposes is undeniably good. H
owever, if we presume that 9/10 errors are, "insignificant" for future operations of the applications. Either because they are temporary or that the cause is clearly visible and easily changed so that normal operations would be possible, or they might be 
insignificant for the end result, like configuration of the application appearance. It seams that always exiting the application is not the optimal. Allowing the application to continue operating would be preferred in almost all cases.
\par 
\par However, To allow this state of the applications should be returned to the same state it was before the operation that lead to an error was started. In doing this there are several things to consider.
\par 
\par }{\b  - Error Handling in State restore Process.
\par }{All restore code must be prote
cted by an error handler, I have seen that restoring is some time done in so called "Error safe mode" either in an active error handler or with "On Error Resume next" (for practical purposes identical). This is some thing I strongly advise against. It is 
v
ery important that the restore process succeed and that you can take the appropriate actions if it does not. Moreover the state restore process code is complicated and the state of the application is unknown. Therefore, my position in this is that it is a
s important to have an error handler in the state restorer code as anywhere else is, and that it can handle, any errors in the state restore process appropriately. 
\par 
\par }{\b  - Completely Restorer a Series of Actions including Successfull Parts.
\par }{Most user tasks con
tains several subtasks for the program and one important consideration is that to restorer state it is not merrily enough to rollback the actions of the current call stack, but also any dependant actions taken earlier, and that have successfully completed
.
 This is probably one of the trickier parts of the state restore process, one way I propose to solve it is to store all calls to process of this nature in a collection. Then you can loop this if state restores is necessary, and call the appropriate functi
ons to roolback the actions taken.
\par 
\par }{\b  - Designing for state restorer from the beginning.
\par }{As most, techniques having such wide consequences as state restorer, it is necessary to design the application from the beginning with it in mind. So this is not some th
ing you shall as a solution to problems with an application with many bugs, but rater an effort to increase the quality of what you produce over a longer time.
\par 
\par }{\b  - Different types of Process.
\par }{Out of state, restore perspective there are two different procedure types. This is a fundamental consideration to the state restore process. As I see it the different types are: one State Irrelevant, two State Relevant 
\par 
\par }{\b 1.}{ State Irrelevant, is special procedure type and though it theoretically only applies to procedur
es that does not change the sate in any way. I make two practical modifications of this and say that: One, A procedure is State Irrelevant if the state changes are insignificant to the main purpose of the application and would pose no problem in the carin
g out of that task. Two: Any state changes are clearly visible and easily manually reset to an acceptable state. I think that these two assumptions make it safe to say that this is the general procedure type. 
\par 
\par }{\b 2.}{ A procedure of this type makes important an
d non-visible or non-editable changes to the core internal state of the application and there for has to be rolledback. Of the type that needs rolledback there are two types. One that needs that to be rolled-back when it is a subpart of a user task. Some 
p
rocess will need special rollback actions even though they them self exited successfully, if they are in a user process that is supposed to rollback. Then other one, that only that has to be rolledback, if the need to rolledback comes from it within it se
lf. 
\par 
\par }{\b  - Precise definitions 
\par }{The more precise you are in labeling the procedures, the more precise you can be in your handling code. Maybe the procedures involved has nothing to do with persisted ?. Then the data can be saved safely etc. The user will sure
ly appreciate having that data recovered. Alternatively, maybe the procedure has nothing to do with core task so the application can go on nearly normally.
\par 
\par }{\b  - Implementing State Restore
\par }{Naturally there are many ways one could go about implementing state restore, they all have different problems possibilities, and consideration, I will try to give you a few examples.
\par 
\par }{\b  - Dual Object Way.
\par }{One way one could to implement state restore is to implement a dual instance of the same class. Then the first call would
 be a BeginTransaction call. Then the actions are preformed on one of the instances and then, after a logical batch of operations are done. A rolledback could be performed if needed, which would reset the object to the state that the object was in when Be
ginTransaction was called. This method would require only a small overhead, in the state transfer code, which might be possible to combine with persistence code if that is necessary.
\par 
\par }{\b  - Dividing an application into logical compartments
\par }{In designing an appl
ications you can Label a part as "nice but not necessary", for operations for instance, a cash check, if this run fails you can just presume that a reprocess is necessary and continue to run the program. A somewhat slower program is better than a broken o
ne. The compartmentalized design can really improve the stability of your app, and when it do stops working it will have a really good reason, not some trivial or cosmetic one. 
\par 
\par }{\b  - Procedure Type Tracing.
\par }{You can decide which procedures in your application
 that belongs to which of the mentioned types and then keep trace of the type of procedures has been executed in a user process and then, when an error occurs decide on the appropriate actions. This is as I see it one of the best ways because it uses the 
fact that 99% of an applications procedures are uninteresting out of state restore perspective (se above). In addition, combined with a block preventing bad data from being saved, It can offer most of the benefits for quite little of the work.
\par 
\par }{\b  - Blocking Bad Data from being saved.
\par }{On an unrecoverable error we can close the (part) of the app that experienced an error, with a lock in persistence so that when we reload the application can load with (hopefully) valid data. Hoping that the error was temporary o
ne. The lock in persistent, blocking any bad data from being persisted, and there for causing errors when reopen. Several considerations can be relevant in this.
\par 
\par }{\b  - Valid Block Save.
\par }{Data must be persisted in batches so that the data in storage is always valid for load, that is when a successful save operation must allow a load of that data. 
\par 
\par }{\b  - Compartmentalized application
\par }{One way to improve "uptime" with this technique could be to design the app as multiple components managed by one small (there for le
es error prone) main component. When a component is closed down due to an error the main app can reload, it there for minimizing the impact for the user and maximizing the chances for continued operations.
\par 
\par }{\b  - Speaking against State Restore.
\par }{When the state
 changes for a process is complicated and the intended approach would require usage of all known techniques in combination. I suspect that designing a full recovery system would actually prove to do more harm than good, so keeping the state restore as sim
p
le as possible is probably a good compromise. Even if it means that it can be a little rough around the edges. As this is only meant to handle unknown errors, it should hopefully be quite rare, so a certain amount of "discomfort" can probably be accepted.
 
One import thing to consider is that any code executed in non-error condition to recover state actually increases the risk of an error. Moreover, we must not forget that any code necessary to restore state might expect errors. It will also require testing
 
and will compete with new features for resources in the development process (which I think normal error handling do NOT do, its simply a necessary part of creating a software products). Even if providing an as streamlined and un-intrusive error recovery p
r
ocedure and state restores process, is desirable I think that focusing on handling errors is probably best. Please consider that state restores is only interesting, when hopefully quite rare unhandled error occurs, if you have many unhandled error you pro
bably are better of to redesign (yes you always start there}{\lang1024 {\field{\*\fldinst SYMBOL 74 \\f "Wingdings" \\s 10}{\fldrslt\f14\fs20}}}{) or recode (a part of) your application.
\par 
\par }{\b  - Speaking For State Restore.
\par }{The overwhelming majority of the procedures and a majority of user processes used in an application are as I said, in my hu
mble opinion, even if not technically, practically insignificant for the state restore process. This could in combination with a few simple techniques give allot of stability for little overhead, both in work and in code complexity.
\par 
\par  }{\b - Conclusion on State Restore
\par }{My conclusion is to implement a simple, easy to maintain system, possibly based on a combination of marking procedures and blocking the save of bad data. This will give you, and your customers most for the available resources.
\par }{\f1\fs14\cf1 
\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328830}{\*\bkmkstart _Toc503337193}Links}{\fs28 {\*\bkmkend _Toc503328830}{\*\bkmkend _Toc503337193} }{
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Here are some links to further information on the subject of error handling.
\par 
\par Another WP (requires login)
\par http://www.themandelbrotset.com/General/whitepapers.asp
\par 
\par Ms documentation and short tutorial. 
\par http://msdn.microsoft.com/library/officedev/office97/web/014.htm
\par 
\par Some notes 
\par }{\field{\*\fldinst { HYPERLINK http://www.cirkadia.com/devbody_wp001.html }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000002b00000068007400740070003a002f002f007700770077002e006300690072006b0061006400690061002e0063006f006d002f0064006500760062006f00640079005f00770070003000300031002e00680074006d006c000000e0c9ea79f9bace118c8200aa
004ba90b5600000068007400740070003a002f002f007700770077002e006300690072006b0061006400690061002e0063006f006d002f0064006500760062006f00640079005f00770070003000300031002e00680074006d006c000000}}}{\fldrslt {\cs15\ul\cf2 
http://www.cirkadia.com/devbody_wp001.html}}}{
\par http://graphicsmagician.com/vbcourse/11design/errors.htm
\par http://www.wiu.edu/users/mflll/visb/error_hand.html
\par http://dvsc.hypermart.net/error.htm
\par http://www.visualbasic.about.com/compute/visualbasic/library/weekly/aa051500a.htm
\par http://www.johnsmiley.com/cis18/september1999/september1999.htm
\par http://www.vbinformation.com/tut-err.htm
\par }{\f1\fs14\cf1 http://www.vbinformation.com/tut-err.htm
\par \page 
\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328831}{\*\bkmkstart _Toc503337194}Books{\*\bkmkend _Toc503328831}{\*\bkmkend _Toc503337194} 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Here are some books on the subject of error handling 
\par 
\par }{\b Debugging and Error Handling
\par }{Debugging Visual Basic
\par by David G. Jung and Jeff Kent ISBN: 0-07-212518-7 
\par 
\par Bug Proofing Visual Basic : A Guide to Error Handling and Prevention
\par by Rod Stephens ISBN: 0471323519 
\par 
\par Debugging Applications
\par by John Robbins ISBN:0735608865 
\par The bug slayer, really cuts in to the problem, Mostly C++ and "Low Level", but some really useful stuff, especially as an introduction to the C style debugging for a VB programer. 
\par 
\par DeBugging C++
\par by Chris H. Pappas and William H. Murray, III ISBN: 0-07-212519-5 
\par 
\par Debugging Perl: Troubleshooting for Programmers
\par by Martin Brown ISBN:0-07-212676-0 
\par 
\par Debugging ASP: Troubleshooting for Programmers
\par by Derek Ferguson ISBN: 0-07-212534-9
\par 
\par DeBugging C++
\par by Chris H. Pappas and William H. Murray, III ,ISBN:0-07-212519-5 
\par 
\par Debugging Visual C++ Windows
\par by Keith Bugg ISBN:0879305452 
\par 
\par Debugging Windows Programs: Strategies, Tools, and Techniques for Visual C++ Programmers
\par by Everett N. McKay, Mike Woodring ISBN:020170238X 
\par 
\par Maso, Brian. Visual J++ 6 from the ground up. cop. 1999
\par \tab Contains a good overview of structured error handling in general and Visual J++ in particular
\par 
\par More Book Tips (Not available in WP only version)}{\f1\fs14\cf1 
\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \fs32\cf2\cgrid {{\*\bkmkstart _Toc503328832}{\*\bkmkstart _Toc503337195}\page 
\par Conclusion On this WP}{\fs28 {\*\bkmkend _Toc503328832}{\*\bkmkend _Toc503337195}
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par Is error handling the holy gr
ail of computer programming? A Frequent statement in advertising is that if you use this or that tool you will increases the development speed 10-100! Times. I think that this just ridicules and make no such claims even if you use all the stuff in this WP
.
 Nether do we for our product. However, I do think that this technique can lead to significant gains in many ways, including the joy of programming, The relationship between development teams and QA and The user satisfaction and predictability of the tota
l
 effort of creating a software product. And this is important enough to justify the necessary effort (not extra effort because "saving" on this end will lead to much larger costs in other parts of the software product creation process). In addition, as a 
f
inal thought I want to say that, nothing is sadder, than having putt in all the work and effort is means to develop a computer application. Just to get a lot of hassle with errors so handling your errors should be a self preserving effort for all programm
ers, designers and mangers. Because no mater how much work and effort it takes to make a computer program the biggest investment is passion and to keep the passion for it must be fun!
\par 
\par Happy Development 
\par 
\par Per Sjoborg
\par 
\par 2000-05-10
\par 
\par }}